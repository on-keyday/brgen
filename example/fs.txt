
typedef struct {
    uint64_t    FirstVCNOfData;
    uint64_t    LastVCNOfData;
    uint16_t    DataRunsOffset;
    uint16_t    CompressionUnitSize;
    uint32_t    Padding;
    uint64_t    AllocatedDataSize;
    uint64_t    DataSize;
    uint64_t    ValidDataSize;
    // uint64_t    TotalAllocatedSize; used if CompressionUnitSize > 0
} NonResidentMFTAttribute;

typedef enum {
    STANDARD_INFORMATION    =   0x00000010,
    ATTRIBUTE_LIST          =   0x00000020,
    FILE_NAME               =   0x00000030,
    OBJECT_ID               =   0x00000040, 
    SECURITY_DESCRIPTOR     =   0x00000050,
    VOLUME_NAME             =   0x00000060,
    VOLUME_INFORMATION      =   0x00000070,
    DATA                    =   0x00000080,
    INDEX_ROOT              =   0x00000090,
    INDEX_ALLOCATION        =   0x000000a0,
    BITMAP                  =   0x000000b0,
    REPARSE_POINT           =   0x000000c0,
    EA_INFORMATION          =   0x000000d0,
    EA                      =   0x000000e0,
    LOGGED_UTILITY_STREAM   =   0x00000100,
    END_OF_ATTRIBUTE        =   0xffffffff,
} AttributeTypes;

typedef enum {
    ATTRIBUTE_FLAG_COMPRESSION_MASK = 0x00ff,
    ATTRIBUTE_FLAG_ENCRYPTED        = 0x4000,
    ATTRIBUTE_FLAG_SPARSE           = 0x8000
} MFTAttributeDataFlags;



typedef struct  {
    uint8_t     Entry[3];
    uint8_t     OEM[8];
    uint16_t    BytesPerSector;
    uint8_t     SectorsPerClusterBlock;
    uint16_t    Unknown_1;
    uint8_t     Unused_2;
    uint16_t    Unused_3;
    uint16_t    Unknown_4;
    uint8_t     MediaDescriptor;
    uint16_t    Unused_5;
    uint16_t    Unused_6;
    uint16_t    Unused_7;
    uint32_t    Unused_8;
    uint32_t    Unknown_9;
    uint8_t     Unknown_10;
    uint8_t     Unknown_11;
    uint8_t     Unknown_12;
    uint8_t     Unknown_13;
    uint64_t    TotalNumberOfSectors;
    uint64_t    MFTClusterBlockNumber;
    uint64_t    MirrorMFTClusterBlockNumber;
    uint8_t     MFTEntrySize;
    uint8_t     Unknown_14[3];
    uint8_t     IndexEntrySize;
    uint8_t     Unknown_15[3];
    uint64_t    NTFSVolumeSerialNumber;
    uint32_t    Unused_16;
    uint8_t     BootCode[426];
    uint16_t    SectorSignature;
} VolumeHeader;

typedef struct {
    uint48_t    MFTEntryIndex;
    uint16_t    SequenceNumber;
} FileReference;

typedef struct {
    uint8_t         Signature[4]; 
    uint16_t        FixupValueOffset;
    uint16_t        NumberOfFixupValues;
    uint64_t        LSNOfLogfile;
    uint16_t        Sequence;
    uint16_t        RefCount;
    uint16_t        AttributeOffset;
    uint16_t        EntryFlags;
    uint32_t        UsedEntrySize;
    uint32_t        TotalEntrySize;
    FileReference   BaseRecordFileRefs;
    uint16_t        FirstAvailableAttributeIndentifer;
    uint16_t        Unknown_1;
    uint32_t        Unknown_2;
} MFTEntryHeader;

typedef struct {
    uint32_t    AttributeType;
    uint32_t    Size;
    uint8_t     NonRegidentFlag; // 0 = RESIDENT_FORM, 1 = NONRESIDENT_FORM
    uint8_t     NameSize;
    uint16_t    NameOffset;
    uint16_t    AttributeDataFlags;
    uint16_t    AttributeIdentifier; // or Instance
} MFTAttributeHeader;

typedef struct {
    uint32_t    DataSize;
    uint16_t    DataOffset; // from MFTAttributeHeader
    uint8_t     IndexedFlag;
    uint8_t     Padding;
} ResidentMFTAttribute;

typedef struct {
    uint64_t    ParentFileRef;
    time_t      CTime; // creation data and time
    time_t      WTime; // last written data and time
    time_t      MTime; // last modification data and time
    time_t      ATime; // last access data and time
    uint64_t    AllocatedFileSize;
    uint64_t    FileSize;
    uint32_t    FileAttributeFlags;
    uint32_t    ExtendedData;
    uint8_t     NameStringSize;
    uint8_t     Namespace;
    char16_t    Name[NameStringSize];
} FileNameAttribute;

typedef enum {
    POSIX,
    WINDOWS,
    DOS,
    DOS_WINDOWS
} NameSpace;

enum SignatureScheme {
    /* RSASSA-PKCS1-v1_5 algorithms */
    rsa_pkcs1_sha256 = 0x0401,
    rsa_pkcs1_sha384 = 0x0501,
    rsa_pkcs1_sha512 = 0x0601,

    /* ECDSA algorithms */
    ecdsa_secp256r1_sha256 = 0x0403,
    ecdsa_secp384r1_sha384 = 0x0503,
    ecdsa_secp521r1_sha512 = 0x0603,

    /* RSASSA-PSS algorithms with public key OID rsaEncryption */
    rsa_pss_rsae_sha256 = 0x0804,
    rsa_pss_rsae_sha384 = 0x0805,
    rsa_pss_rsae_sha512 = 0x0806,

    /* EdDSA algorithms */
    ed25519 = 0x0807,
    ed448 = 0x0808,

    /* RSASSA-PSS algorithms with public key OID RSASSA-PSS */
    rsa_pss_pss_sha256 = 0x0809,
    rsa_pss_pss_sha384 = 0x080a,
    rsa_pss_pss_sha512 = 0x080b,

    /* Legacy algorithms */
    rsa_pkcs1_sha1 = 0x0201,
    ecdsa_sha1 = 0x0203,

    /* Reserved Code Points */
    private_use_start = 0xFE00,

};

enum HandshakeType  {
                client_hello = 1,
                server_hello = 2,
                new_session_ticket = 4,
                end_of_early_data = 5,
                encrypted_extensions = 8,
                certificate = 11,
                certificate_request = 13,
                certificate_verify = 15,
                finished = 20,
                key_update = 24,
                message_hash = 254,
            };

         enum ExtensionType  {
                    server_name = 0,                             /* RFC 6066 */
                    max_fragment_length = 1,                     /* RFC 6066 */
                    status_request = 5,                          /* RFC 6066 */
                    supported_groups = 10,                       /* RFC 8422, 7919 */
                    signature_algorithms = 13,                   /* RFC 8446 */
                    use_srtp = 14,                               /* RFC 5764 */
                    heartbeat = 15,                              /* RFC 6520 */
                    application_layer_protocol_negotiation = 16, /* RFC 7301 */
                    signed_certificate_timestamp = 18,           /* RFC 6962 */
                    client_certificate_type = 19,                /* RFC 7250 */
                    server_certificate_type = 20,                /* RFC 7250 */
                    padding = 21,                                /* RFC 7685 */
                    pre_shared_key = 41,                         /* RFC 8446 */
                    early_data = 42,                             /* RFC 8446 */
                    supported_versions = 43,                     /* RFC 8446 */
                    cookie = 44,                                 /* RFC 8446 */
                    psk_key_exchange_modes = 45,                 /* RFC 8446 */
                    certificate_authorities = 47,                /* RFC 8446 */
                    oid_filters = 48,                            /* RFC 8446 */
                    post_handshake_auth = 49,                    /* RFC 8446 */
                    signature_algorithms_cert = 50,              /* RFC 8446 */
                    key_share = 51,                              /* RFC 8446 */
                    quic_transport_parameters = 0x39,            /* RFC 9001 */
                };
 enum NamedGroup {

                    /* Elliptic Curve Groups (ECDHE) */
                    secp256r1 = 0x0017,
                    secp384r1 = 0x0018,
                    secp521r1 = 0x0019,
                    x25519 = 0x001D,
                    x448 = 0x001E,

                    /* Finite Field Groups (DHE) */
                    ffdhe2048 = 0x0100,
                    ffdhe3072 = 0x0101,
                    ffdhe4096 = 0x0102,
                    ffdhe6144 = 0x0103,
                    ffdhe8192 = 0x0104,

                    /* Reserved Code Points */
                    ffdhe_private_use_begin = 0x01FC,
                    ffdhe_private_use_end = 0x01FF,
                    ecdhe_private_use_begin = 0xFE00,
                    ecdhe_private_use_begin_end = 0xFEFF,

                };
                  enum CipherSuite {
                TLS_NULL_WITH_NULL_NULL = 0x0000,
                TLS_AES_128_GCM_SHA256 = 0x1301,
                TLS_AES_256_GCM_SHA384 = 0x1302,
                TLS_CHACHA20_POLY1305_SHA256 = 0x1303,
                TLS_AES_128_CCM_SHA256 = 0x1304,
                TLS_AES_128_CCM_8_SHA256 = 0x1305,
            };
              enum AlertLevel {
                warning = 1,
                fatal = 2,
            };

            enum AlertDescription  {
                close_notify = 0,
                unexpected_message = 10,
                bad_record_mac = 20,
                record_overflow = 22,
                handshake_failure = 40,
                bad_certificate = 42,
                unsupported_certificate = 43,
                certificate_revoked = 44,
                certificate_expired = 45,
                certificate_unknown = 46,
                illegal_parameter = 47,
                unknown_ca = 48,
                access_denied = 49,
                decode_error = 50,
                decrypt_error = 51,
                protocol_version = 70,
                insufficient_security = 71,
                internal_error = 80,
                inappropriate_fallback = 86,
                user_canceled = 90,
                missing_extension = 109,
                unsupported_extension = 110,
                unrecognized_name = 112,
                bad_certificate_status_response = 113,
                unknown_psk_identity = 115,
                certificate_required = 116,
                no_application_protocol = 120,
            };