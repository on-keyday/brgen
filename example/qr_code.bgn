
config.url = "https://www.swetake.com/qrcode/qr2.html"
config.url = "https://www.tech-jp.com/QRCode/CharacterCount.html"
config.url = "http://ik1-316-18424.vs.sakura.ne.jp/category/QRCode/article/02_06_number_mode_1.html"

enum Mode:
    :u4
    terminal = 0b0000
    numeric = 0b0001
    alnum = 0b0010
    octet = 0b0100
    kanji = 0b1000

enum ErrorCorrectionLevel:
    L
    M
    Q
    H

state QRCodeState:
    version :u8
    correct_level :ErrorCorrectionLevel
    data_written :u16

qr_state :QRCodeState

VERSION_1_9 ::= 1..=9
VERSION_10_26 ::= 10..=26
VERSION_27_40 ::= 27..=40

format Header:
    mode :Mode
    qr_state.version >= 1 && qr_state.version <= 40
    match mode:
        Mode.numeric:
            match qr_state.version:
              VERSION_1_9 => length :u10
              VERSION_10_26 => length :u12
              VERSION_27_40 => length :u14
        Mode.alnum:
            match qr_state.version:
              VERSION_1_9 => length :u9
              VERSION_10_26 => length :u11
              VERSION_27_40 => length :u13
        Mode.octet:
            match qr_state.version:
              VERSION_1_9 => length :u8
              VERSION_10_26 => length :u16
              VERSION_27_40 => length :u16
        Mode.kanji:
            match qr_state.version:
              VERSION_1_9 => length :u8
              VERSION_10_26 => length :u10
              VERSION_27_40 => length :u12

fn align8() -> u32:
    align := 8 - input.bit_offset & 0x7
    return align == 8 ? 0 : align

PADDING_1 ::= 0b11101100
PADDING_2 ::= 0b00010001

dataWord ::= <[40][4]u16>(
    #         L  M  Q  H
    <[4]u16>(19,16,13, 9),  # 1
    <[4]u16>(34,28,22,16),  # 2
    <[4]u16>(55,44,34,26),  # 3
    <[4]u16>(80,64,48,36),  # 4
    <[4]u16>(108,86,62,46),  # 5
    <[4]u16>(136,108,76,60),  # 6
    <[4]u16>(156,124,88,66),  # 7
    <[4]u16>(194,154,110,86),  # 8
    <[4]u16>(232,182,132,100),  # 9
    <[4]u16>(274,216,154,122),  # 10
    <[4]u16>(324,254,180,140),  # 11
    <[4]u16>(370,290,206,158),  # 12
    <[4]u16>(428,334,244,180),  # 13
    <[4]u16>(461,365,261,197),  # 14
    <[4]u16>(523,415,295,223),  # 15
    <[4]u16>(589,453,325,253),  # 16
    <[4]u16>(647,507,367,283),  # 17
    <[4]u16>(721,563,397,313),  # 18
    <[4]u16>(795,627,445,341),  # 19
    <[4]u16>(861,669,485,385),  # 20
    <[4]u16>(932,714,512,406),  # 21
    <[4]u16>(1006,782,568,442),  # 22
    <[4]u16>(1094,860,614,464),  # 23
    <[4]u16>(1174,914,664,514),  # 24
    <[4]u16>(1276,1000,718,538),  # 25
    <[4]u16>(1370,1062,754,596),  # 26
    <[4]u16>(1468,1128,808,628),  # 27
    <[4]u16>(1531,1193,871,661),  # 28
    <[4]u16>(1631,1267,911,701),  # 29
    <[4]u16>(1735,1373,985,745),  # 30
    <[4]u16>(1843,1455,1033,793),  # 31
    <[4]u16>(1955,1541,1115,845),  # 32
    <[4]u16>(2071,1631,1171,901),  # 33
    <[4]u16>(2191,1725,1231,961),  # 34
    <[4]u16>(2306,1812,1286,986),  # 35
    <[4]u16>(2434,1914,1354,1054),  # 36
    <[4]u16>(2566,1992,1426,1096),  # 37
    <[4]u16>(2702,2102,1502,1142),  # 38
    <[4]u16>(2812,2216,1582,1222),  # 39
    <[4]u16>(2956,2334,1666,1276)  # 40
)


format Trailer:
    terminal :u4(0)
    align_size ::= align8()
    align_bit :[align_size]u1(input.align = 8)
    size := dataWord[qr_state.version][u8(qr_state.correct_level)]
    i := qr_state.data_written + (align_size > 0 ? 1 :0)
    count := 0
    for ; i < size; i+=1:
        if count % 2 == 0:
            magic :u8(PADDING_1)
        else:
            magic :u8(PADDING_2)
        count+=1

fn appendNtobit(out :[]u1,n :u8,value :u16) -> []u1:
    for i in n:
        v ::= value & (u16(1) << (n - i)) != 0
        out[out.length] = u1(v ? 1 :0) # append pattern (x[x.length] = y)
    return out


fn numeric_mode_encode(num :[]u8) -> []u1:
    result := <[]u1>()
    for i:=u64(0);i < num.length / 3;i+=1:
        value ::= u10((num[i*3 + 0] - '0') *100 +
                      (num[i*3 + 1] - '0') * 10 + 
                      (num[i*3 + 2] - '0'))
        result = appendNtobit(result,10,u16(value))

    match num.length % 3:
        1:
            value ::= u4(num[num.length-1] - '0')
            result = appendNtobit(result,4,u16(value))
        2:
            value ::= u7((num[num.length-2] - '0')*10 +
                         (num[num.length-1] - '0'))
            result = appendNtobit(result,7,u16(value))

    return result
