config.go.import("bytes")

path ::= config.import("./example/ast_step/step1.bgn")

config.go.file.name = "packet.go"
config.go.package = "github.com/on-keyday/quic_packet"
config.go.import("go/ast")


config.export(QUICPacket,ConnectionID,Varint)


format QUICPacket: 
   form :u1
   fixed :u1
   if form == 1:
      :LongPacket
   else:
      :OneRTTPacket
   

format LongPacket:
   long_packet_type :u2
   reserved :u2
   packet_number_length :u2
   version :u32
   dst_conn_id :ConnectionID
   src_conn_id :ConnectionID

format OneRTTPacket:
   spin :u1
   reserved :u2
   key_phase :u2
   packet_number_length :u2
   dst_conn_id :ConnectionID


format ConnectionID:
   id :[10]byte
   fn encode():
      d


format Varint:
   value :u64
   fn decode():
      p = input[0]
      value = match p&0xC0 >> 6:
         0 => input.u8() & !msb(2)
         1 => input.u16() & !msb(2)
         2 => input.u32() & !msb(2)
         3 => input.u64() & !msb(2)

   fn encode():
      match value:
         ..0x40 => output.u8(value.u8())
         ..0x4000 => output.u16(value.u16() | msb(2,1))
         ..0x40000000 => output.u32(value.u32() | msb(2,2))
         ..0x4000000000000000 => output.u64(value | msb(2,3))
         _ => error("too large number")
   