config.go.import("bytes")

config.go.file.name = "packet.go"
config.go.package = "github.com/on-keyday/quic_packet"


config.cpp.file.header.name= "packet.h"
config.cpp.file.source.name= "packet.cpp"
config.cpp.namespace = "quic::packet"


config.export(QUICPackets,ConnectionID)

qvarint ::= config.import("quic_varint.bgn")

format QUICFrame:
   type :qvarint.VarInt

format QUICPackets:
   packets :[..]QUICPacket

format QUICPacket: 
   form :u1
   fixed :u1
   if form == 1:
      hdr :LongPacketHeader
   else:
      hdr :OneRTTPacketHeader

state QUICState:
   encrypted :bool
   packet_number_length :u8
   enable_length :bool
   length :u8


format LongPacketHeader:
   long_packet_type :u2
   reserved :u2
   packet_number_length :u2
   qstate.packet_number_length = u8(packet_number_length) + 1
   version :u32
   dst_conn_id :ConnectionID
   src_conn_id :ConnectionID
   match version:
      0 => hdr :VersionNegotiationPacket
      # version 1
      1 => match long_packet_type:
         0 => hdr :InitialPacketHeader
         1 => hdr :ZeroRTTPacketHeader
         2 => hdr :HandshakePacketHeader
         3 => hdr :RetryPacket
         .. => error("invalid long packet type")
      # version 2
      0x6b3343cf => match long_packet_type: 
         1 => hdr: InitialPacketHeader
         2 => hdr: ZeroRTTPacketHeader
         3 => hdr: HandshakePacketHeader
         0 => hdr: RetryPacket
         .. => error("invalid long packet type")
      .. => error("invalid version")

format VersionNegotiationPacket:
   versions :[..]u32


qstate :QUICState

format InitialPacketHeader:
   token_length :qvarint.VarInt
   token :[token_length]u8
   length :qvarint.VarInt
   packet_number :[qstate.packet_number_length]u8

format RetryPacket:
   retry_token :[..]u8
   retry_integrity_tag :[16]u8

format HandshakePacketHeader:
   length :qvarint.VarInt
   if qstate.encrypted:
      encrypted_payload :[length]u8
   else:
      packet_number :[qstate.packet_number_length]u8
      payload :[length]u8


format ZeroRTTPacketHeader:
   length :qvarint.VarInt
   if qstate.encrypted:
      encrypted_payload :[length]u8
   else:
      packet_number :[qstate.packet_number_length]u8
      payload :[length.value - qstate.packet_number_length]u8


format OneRTTPacketHeader:
   spin :u1
   reserved :u2
   key_phase :u1
   packet_number_length :u2
   qstate.enable_length = true
   dst_conn_id :ConnectionID
   if qstate.encrypted:
      encrypted_payload :[..]u8
   else:
      packet_number :[packet_number_length]u8
      payload :[..]u8
   input.remain == 0


format ConnectionID:
   if qstate.enable_length:
      id :[qstate.length]u8
   else:
      length :u8
      id :[length]u8




  