
format Bool:
    value :u8
    value == 0 || value == 1

format Int:
    value :s32

    fn encode():
        v := (u32(value) << 1) ^ (u32(value) >> 31)
        for value >= 0x80:
            output.put(u8(value | 0x80))
            value = value >> 7
        output.put(u8(value))
        
    fn decode():
        v := 0
        shift := 0
        for:
            shift < 32
            byte := input.get()
            v = v | (byte & 0x7F) << shift
            if byte & 0x80 == 0:
                break
            shift = shift + 7
        value = (v >> 1) ^ -(v & 1)

# TODO(on-keyday): generics?
format Long:
    value :s64

    fn encode():
        v := (u64(value) << 1) ^ (u64(value) >> 63)
        for value >= 0x80:
            output.put(u8(value | 0x80))
            value = value >> 7
        output.put(u8(value))
        
    fn decode():
        v := 0
        shift := 0
        for:
            shift < 64
            byte := input.get()
            v = v | (byte & 0x7F) << shift
            if byte & 0x80 == 0:
                break
            shift = shift + 7
        value = (v >> 1) ^ -(v & 1)

# TODO(on-keyday): generics?
format Array:
    length :Long
    items :[length]Item

format Float:
    value :fl32

format Double:
    value :fl64

format String:
    length :Long
    value :[length]u8

format Bytes:
    length :Long
    value :[length]u8

format Enum:
    value :Long

