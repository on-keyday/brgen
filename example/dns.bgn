
enum DNSOpCode:
    :u4
    QUERY = 0
    IQUERY = 1
    STATUS = 2
    NOTIFY = 4
    UPDATE = 5

enum DNSReturnCode:
    :u4
    NOERROR = 0
    FORMERR = 1
    SERVFAIL = 2
    NXDOMAIN = 3
    NOTIMP = 4
    REFUSED = 5
    YXDOMAIN = 6
    YXRRSET = 7
    NXRRSET = 8
    NOTAUTH = 9
    NOTZONE = 10

format PureLabel:
    length :u8
    length <= 63
    data :[length]u8

    

format DNSLabel:
    prefix :u2
    match prefix:
        0b11 => pointer :u14
        0b00:
            len :u6
            label :[len]u8
        .. => error("unexpected label")

format DomainName: 
    labels :[]DNSLabel

    fn encode():
        for i in labels.length:
            output.put(labels[i])
            if available(labels[i].pointer) || u8(labels[i].len) == 0:
                i + 1 == labels.length

    fn decode():
        for:
            lab := input.get(DNSLabel)
            if available(lab.pointer):
                labels[labels.length] = lab
                break
            if u8(lab.len) == 0:
                labels[labels.length] = lab
                break
            labels[labels.length] = lab
            

format DNSQuestion:
    name :DomainName
    type :u16
    class :u16

format DNSResourceRecord:
    name :DomainName
    type :u16
    class :u16
    ttl :u32
    data_length :u16
    data :[data_length]u8


format DNSHeader:
    id :u16
    response :u1
    opcode :DNSOpCode
    authoritative :u1
    truncated :u1
    recursion_desired :u1
    recursion_available :u1
    z :u3
    return_code :DNSReturnCode
    query_count :u16
    answer_count :u16
    authority_count :u16
    additional_count :u16

format DNSMessage:
    header :DNSHeader
    questions :[header.query_count]DNSQuestion
    answers :[header.answer_count]DNSResourceRecord
    authorities :[header.authority_count]DNSResourceRecord
    additionals :[header.additional_count]DNSResourceRecord


