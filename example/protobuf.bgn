
format Varint:
    len :u8
    value :u64

    fn decode():
        value = 0
        len = 0
        for:
            v := input.get()
            value |= u64(v & 0x7f) << (7 * len)
            len += 1
            if v < 0x80:
                return
      

    fn encode():
        value_copy := value
        counter := 0
        for:
            v := u8(value_copy & 0x7f)
            value_copy = value_copy >> 7
            if value_copy == 0 && (len == 0 || counter + 1 >= len):
                output.put(v)
                return
            output.put(v | 0x80)
            counter += 1


enum WireType:
    Varint = 0
    Fixed64 = 1
    LengthDelimited = 2
    StartGroup = 3
    EndGroup = 4
    Fixed32 = 5

format Field:
    id :Varint
    fn type() -> WireType:
        return WireType(id.value & 0x7)
    fn number() -> u64:
        return id.value >> 3
    
    match type():
        WireType.Varint => value :Varint
        WireType.Fixed64 => value :u64
        WireType.LengthDelimited:
            length :Varint
            value :[length]u8
        WireType.StartGroup => ..
        WireType.EndGroup => ..
        WireType.Fixed32 => value :u32
