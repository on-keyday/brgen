config.go.package = "routing"

BGP_PORT ::= 179

format SegmentRouting:
    header :IPv6ExtHeader
    routingType :u8
    segmentsLeft :u8
    lastEntry :u8
    flags :u8
    tag :u16
    segment_list :[lastEntry + 1][16]u8
    u16(header.hdrExtLen)*8 >= 16*(u16(lastEntry) + 1)
    remaining_in_byte ::= u16(header.hdrExtLen)*8 - (u16(lastEntry) + 1)*16
    options :[..]SegmentRoutingTLV(input = input.subrange(remaining_in_byte))

format SegmentRoutingTLV:
    type :u8
    if type !=0:
        len :u8
        data :[len]u8

format IPv6ExtHeader:
    nextHeader :ProtocolNumber 
    hdrExtLen :u8 

format IPv6ExtCommon:
    header :IPv6ExtHeader
    data :[6 + header.hdrExtLen*8]u8

format IPv6Header:
    version :u4 
    trafficClass :u8 flowLabel :u20
    payloadLen :u16
    nextHeader :ProtocolNumber
    hopLimit :u8
    srcAddr :[16]u8
    dstAddr :[16]u8

enum ProtocolNumber:
    :u8
    HOPOPT = 0
    ICMP = 1
    IGMP = 2
    GGP = 3
    IPV4 = 4
    ST = 5
    TCP = 6
    CBT = 7
    EGP = 8
    IGP = 9
    BBN_RCC_MON = 10
    NVP_II = 11
    PUP = 12
    ARGUS = 13
    EMCON = 14
    XNET = 15
    CHAOS = 16
    UDP = 17
    MUX = 18
    DCN_MEAS = 19
    HMP = 20
    PRM = 21
    XNS_IDP = 22
    TRUNK_1 = 23
    TRUNK_2 = 24
    RoutingHeader = 43
    ICMPV6 = 58

    Ethernet = 143

# BGP

enum BGPType:
    :u8
    open = 1
    update = 2
    notification = 3
    keepalive = 4

format BGPHeader:
    marker :"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    length :u16
    type   :BGPType

format BGPPacket:
    header :BGPHeader
    header.length >= 19
    match header.type:
        BGPType.open => open :Open(input=input.subrange(header.length-19))
        BGPType.update => update :Update(input=input.subrange(header.length-19))
        BGPType.notification => notification :Notification(input=input.subrange(header.length-19))
        BGPType.keepalive => header.length == 19

format Open:
    version :u8
    as      :u16
    hold    :u16
    id      :u32
    optlen  :u8
    options     :[..]BGPOption(input=input.subrange(optlen))

enum BGPOptionType:
    :u8
    capability = 2

format BGPOption:
    type :BGPOptionType
    len  :u8
    data :[len]u8

format WithdrawnRoute:
    bits :u16
    in_byte ::= (bits + 7) / 8
    prefix :[..]u8(input=input.subrange(in_byte))

format WithdrawnRoutes:
    len :u16
    data :[..]WithdrawnRoute(input=input.subrange(len))

format PathAttributes:
    len :u16
    data :[..]PathAttribute(input=input.subrange(len))

format Update:
    withdrawn_routes :WithdrawnRoutes
    path_attr :PathAttributes
    if path_attr.len > 0:
        network_reachability_info      :[..]NetWorkReachabilityInfo




config.url = "https://www.iana.org/assignments/bgp-parameters/bgp-parameters.xhtml#bgp-parameters-1"
enum AttributeCode:
    :u8
    ORIGIN = 1
    AS_PATH = 2
    NEXT_HOP = 3
    MULTI_EXIT_DISC = 4
    LOCAL_PREF = 5
    ATOMIC_AGGREGATE = 6
    AGGREGATOR = 7
    COMMUNITIES = 8
    ORIGINATOR_ID = 9
    CLUSTER_LIST = 10
    DPA_deprecated = 11
    ADVERTISER_deprecated = 12
    RCID_PATH_deprecated = 13
    MP_REACH_NLRI = 14
    MP_UNREACH_NLRI = 15
    EXTENDED_COMMUNITIES = 16
    AS4_PATH = 17
    AS4_AGGREGATOR = 18
    SSA_deprecated = 19
    ConnectorAttribute_deprecated = 20
    AS_PATHLIMIT_deprecated = 21
    PMSI_TUNNEL = 22
    TunnelEncap = 23
    TrafficEngineering = 24
    IPv6AddressSpecificExtendedCommunity = 25
    AIGP = 26
    PE_DISTINGUISHER_LABEL = 27
    BGP_LS = 29
    LargeCommunity = 32
    BGPsec_Path = 33
    OnlyForORF = 35
    BGP_Domain_Path = 36
    SFP_Attribute = 37
    BFD_Discriminator = 38
    BGP_Prefix_SID = 40
    BIER = 41
    ATTR_SET = 128
    ReservedForDevelopment = 255



format AttributeType:
    option :u1
    transitive :u1
    partial :u1
    extended :u1
    reserved :u4(0)
    code  :AttributeCode

format PathAttribute:
    type :AttributeType
    if type.extended == 1:
        len :u16
    else:
        len :u8
    len_tmp ::= len # FIX: len_tmp is temporary used
    match type.code:
        AttributeCode.ORIGIN => origin :Origin(input=input.subrange(len_tmp))
        AttributeCode.AS_PATH => as_path :AsPath(input=input.subrange(len_tmp))
        .. => data :[len_tmp]u8

enum AsPathSegmentType:
    :u8
    AS_SET = 1
    AS_SEQUENCE = 2
    AS_CONFED_SEQUENCE = 3
    AS_CONFED_SET = 4



enum Origin:
    :u8
    IGP = 0
    EGP = 1
    INCOMPLETE = 2

format AsPath:
    segments :[..]AsPathSegment

format AsPathSegment:
    type :AsPathSegmentType
    len  :u8
    data :[len]u16

format NetWorkReachabilityInfo:
    prefixlen :u8
    prefix    :[prefixlen]u8

format Notification:
    code :u8
    subcode :u8
    data :[..]u8






enum EtherType:
    :u16
    ipv4 = 0x0800
    arp = 0x0806
    vlan = 0x8100
    ipv6 = 0x86DD
    service_vlen = 0x88A8
    pppoe_discovery = 0x8863
    pppoe_session = 0x8864

format OUI:
    high: u6
    local :u1
    multicast :u1
    low :[2]u8

format MacAddress:
    oui :OUI
    nic :[3]u8

format EthernetFrame:
    dstMac :[6]u8
    srcMac :[6]u8
    ether_type :u16
    if ether_type == u16(EtherType.vlan):
        vlan_tag :u16
        ether_type2 :u16
    elif ether_type == u16(EtherType.service_vlen):
        service_vlan_tag :u16
        dummy_ether_type :u16(u16(EtherType.vlan))
        vlan_tag :u16
        ether_type2 :u16
    len ::= available(ether_type2) ? ether_type2 : ether_type
    len <= 0x5dc || len >= 0x600
    if len >= 0x600:
        data :[..]u8
    else:
        # peek :u16(input.peek = true)
        data :[len]u8

format TCPFlags:
    CWR :u1 ECE :u1 URG :u1 ACK :u1 PSH :u1 RST :u1 SYN :u1 FIN :u1

format TCPHeader:
    srcPort :u16
    dstPort :u16
    seqNum :u32
    ackNum :u32
    dataOffset :u4
    reserved :u4
    flags :TCPFlags
    windowSize :u16
    checksum :u16
    urgentPointer :u16
    options :[..]TCPOption(input = input.subrange(u8(dataOffset*4)-20))

format TCPSegment:
    hdr :TCPHeader
    payload :[..]u8

enum TCPState:
    CLOSED
    LISTEN
    SYN_SENT
    SYN_RCVD
    ESTABLISHED
    FIN_WAIT_1
    FIN_WAIT_2
    CLOSE_WAIT
    CLOSING
    LAST_ACK
    TIME_WAIT

enum TCPOptionKind:
    :u8
    END_OF_OPTIONS_LIST = 0
    NOP = 1
    MAXIMUM_SEGMENT_SIZE = 2
    WINDOW_SCALE = 3
    SACK_PERMITTED = 4
    SACK = 5
    TIMESTAMP = 8
    MPTCP = 30


format TCPOption:
    kind :TCPOptionKind
    match kind:
        TCPOptionKind.END_OF_OPTIONS_LIST => ..
        TCPOptionKind.NOP => ..
        TCPOptionKind.MAXIMUM_SEGMENT_SIZE:
            length :u8
            length == 4
            mss :u16    
        TCPOptionKind.WINDOW_SCALE:
            length :u8
            length == 3
            shiftCount :u8
        TCPOptionKind.SACK_PERMITTED: 
            length :u8
            length == 2
        TCPOptionKind.SACK:
            length :u8
            length >= 2
            sack :Sack(input = input.subrange(length-2))  
        TCPOptionKind.TIMESTAMP:
            length :u8
            length == 10
            timestamp :Timestamp(input = input.subrange(length-2))  
        ..:
            length :u8
            length >= 2
            data :[length-2]u8
            

format SackBlock:
    left :u32
    right :u32

format Sack:
    blocks :[..]SackBlock

format Timestamp:
    value :u32
    echoReply :u32

format ICMPHeader:
    type: u8
    code: u8
    checksum: u16

enum ICMPv6Type:
    :u8
    destination_unreachable = 1
    packet_too_big = 2
    time_exceeded = 3
    parameter_problem = 4
    echo_request = 128
    echo_reply = 129
    multicast_listener_query = 130
    multicast_listener_report = 131
    multicast_listener_done = 132
    router_solicitation = 133
    router_advertisement = 134
    neighbor_solicitation = 135
    neighbor_advertisement = 136
    redirect_message = 137
    router_renumbering = 138
    node_information_query = 139
    node_information_response = 140 
    inverse_neighbor_discovery_solicitation = 141
    inverse_neighbor_discovery_advertisement = 142
    v2_multicast_listener_report = 143
    home_agent_address_discovery_request = 144
    home_agent_address_discovery_reply = 145
    mobile_prefix_solicitation = 146
    mobile_prefix_advertisement = 147
    certification_path_solicitation = 148
    certification_path_advertisement = 149
    experimental_mobility_protocols = 253
    experimental_mobility_protocols_2 = 254
    reserved = 255

format ICMPTimeExceeded:
    unused :u32
    data: [..]u8

format ICMPEcho:
    id: u16
    seq: u16
    data: [..]u8


format ICMPDestinationUnreachable:
    unused: u16
    next_hop_mtu: u16
    data: [..]u8

format ICMPPacketTooBig:
    unused: u32
    mtu: u32
    data: [..]u8



format ICMPv6ParameterProblem:
    pointer: u32
    data: [..]u8

format NDPRouterSolicitation:
    reserved: u32
    options : [..]NDPOption

format NDPRouterAdvertisement:
    cur_hop_limit: u8
    managed_addr_config :u1
    other_stateful_config :u1
    reserved: u6
    router_lifetime: u16
    reachable_time: u32
    retrans_timer: u32
    options: [..]NDPOption

format NDPNeighborSolicitation:
    reserved: u32
    target_addr: [16]u8
    options: [..]NDPOption

format NDPNeighborAdvertisement:
    router :u1
    solicited :u1
    override :u1
    flags: u29
    target_addr: [16]u8
    options: [..]NDPOption

format NDPRedirectMessage:
    target_addr: [16]u8
    dest_addr: [16]u8
    options: [..]NDPOption

format FloatMaximumResponseCode:
    one :u1(1)
    exp :u3
    mant :u12

format FloatQQIC:
    one :u1(1)
    exp :u3
    mant :u4

format MulticastListenerQuery:
    max_resp_code :u16
    reserved1: u16
    mcast_addr: [16]u8
    reserved2 :u4
    suppress_router_processing :u1
    queries_robustness_var :u3
    querier_query_interval :u8
    number_of_sources :u16
    source_addr: [number_of_sources][16]u8

format MulticastAddressRecord:
    record_type: u8
    aux_data_len: u8
    number_of_sources: u16
    multicast_addr: [16]u8
    source_addr: [number_of_sources][16]u8
    aux_data :[aux_data_len]u8

format V2MulticastListernerReport:
    reserved1: u16
    number_of_records: u16
    records: [number_of_records]MulticastAddressRecord


format ICMPv6Packet:
    header: ICMPHeader
    match ICMPv6Type(header.type):
        ICMPv6Type.echo_request:
            echo_request: ICMPEcho
        ICMPv6Type.echo_reply:
            echo_reply: ICMPEcho
        ICMPv6Type.time_exceeded:
            time_exceeded: ICMPv6ParameterProblem
        ICMPv6Type.packet_too_big:
            packet_too_big: ICMPPacketTooBig
        ICMPv6Type.parameter_problem:
            parameter_problem: ICMPv6ParameterProblem
        ICMPv6Type.destination_unreachable:
            destination_unreachable: ICMPDestinationUnreachable
        ICMPv6Type.router_solicitation:
            router_solicitation: NDPRouterSolicitation
        ICMPv6Type.router_advertisement:
            router_advertisement: NDPRouterAdvertisement
        ICMPv6Type.neighbor_solicitation:
            neighbor_solicitation: NDPNeighborSolicitation
        ICMPv6Type.neighbor_advertisement:
            neighbor_advertisement: NDPNeighborAdvertisement
        ICMPv6Type.redirect_message:
            redirect_message: NDPRedirectMessage
        ICMPv6Type.multicast_listener_query:
            multicast_listener_query: MulticastListenerQuery
        ICMPv6Type.v2_multicast_listener_report:
            v2_multicast_listener_report: V2MulticastListernerReport
        ..:
            data: [..]u8


enum NDPOptionType:
    :u8
    source_link_layer_address = 1
    target_link_layer_address = 2
    prefix_information = 3
    redirect_header = 4
    mtu = 5

format NDPOption:
    type: NDPOptionType
    length: u8
    length != 0
    match NDPOptionType(type):
        NDPOptionType.source_link_layer_address:
            link_layer_address: [length*8 - 2]u8
        NDPOptionType.target_link_layer_address:
            link_layer_address: [length*8 - 2]u8
        NDPOptionType.prefix_information:
            prefix_information: PrefixInformation(input = input.subrange(length*8 - 2))
        NDPOptionType.redirect_header:
            redirect_header: RedirectHeader(input = input.subrange(length*8 - 2))
        NDPOptionType.mtu:
            mtu: MTU(input = input.subrange(length*8 - 2))
        ..:
            data: [length * 8 - 2]u8

format PrefixInformation:
    prefix_length: u8
    on_link: u1
    autoconfig: u1
    reserved1: u6
    valid_lifetime: u32
    preferred_lifetime: u32
    reserved2: u32
    prefix: [16]u8

format RedirectHeader:
    reserved :[6]u8
    hdr_and_data: [..]u8

format MTU:
    reserved: u16
    mtu: u32

format IPv6ChecksumPseudoHeader:
    srcAddr :[16]u8
    dstAddr :[16]u8
    upper_layer_length :u32
    zero :u24
    nextHeader :ProtocolNumber
