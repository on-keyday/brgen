config.cpp.namespace = "brgen::vm2"

enum Op2:
    :u8
    NOP # NOP
    FUNC_ENTRY # FUNC_ENTRY ; same as NOP but used to indicate the entry point of a function
    TRSF # TRSF <from> <to>
    LOAD_MEMORY # LOAD_MEMORY <from> <to> <size>
    STORE_MEMORY # STORE_MEMORY <from> <to> <size>
    LOAD_IMMEDIATE  # LOAD_IMMEDIATE <immediate value> <to>

    # artihmetic

    # binary <op> <operand1> <operand2> <result>
    ADD
    SUB
    MUL
    DIV
    MOD
    AND
    OR
    XOR
    NOT
    SHL
    SHR

    # compare <op> <operand1> <operand2> <result>
    EQ
    NE
    LT 
    LE 
    # GT and GE can be implemented by swapping the operands so they are not needed

    #unary <op> <operand> <result>
    INC
    DEC
    NEG

    # jump
    JMP # JMP <to>
    JMPIF # JMPIF <condition> <to>

    # call
    CALL # CALL <to> ; this instruction will push the return address, change the SP and BP and jump to the address 
    RET # RET ; this instruction will change the SP and BP, pop the return address and jump to the address
    # syscall
    SYSCALL_IMMEDIATE # SYSCALL <syscall number>

    # stack
    PUSH # PUSH <register number>
    POP # POP <register number>
    PUSH_IMMEDIATE # PUSH_IMMEDIATE <immediate value>

  


enum Register:
    :u8
    R0
    R1
    R2
    R3
    R4
    R5
    R6
    R7
    R8
    R9
    R10
    R11
    R12
    R13
    R14
    OBJECT_POINTER
    PC
    SP
    BP
    NUL # NUL register is used to indicate that the register is not used
    TRAP # TRAP register is used to indicate that the register is used to store the trap number
    TRAP_REASON # TRAP_REASON register is used to store the reason of the trap (specific to the trap)
    REGISTER_COUNT


enum TrapNumber:
    :u8
    NO_TRAP
    DIVISION_BY_ZERO 
    INVALID_SYSCALL # TRAP_REASON will contain the syscall number
    INVALID_MEMORY_ACCESS # TRAP_REASON will contain the address that was attempted to be accessed
    LARGE_SIZE # TRAP_REASON will contain the size of the load/store operation
    SYSCALL # TRAP_REASON will contain the syscall number
    INVALID_INSTRUCTION # TRAP_REASON will contain the instruction offset
    INVALID_JUMP # TRAP_REASON will contain the jump offset
    STACK_OVERFLOW # TRAP_REASON will contain the stack top address
    STACK_UNDERFLOW # TRAP_REASON will contain the stack top address
    INVALID_REGISTER_ACCESS # TRAP_REASON will contain the register number
    OUT_OF_MEMORY # TRAP_REASON will contain the size of the allocation
    END_OF_PROGRAM

format MemoryLayout:
    stack_size :u64
    data_size :u64
    code_size :u64
    entry_point :u64

enum SyscallNumber:
    :u64
    READ_IN # READ_IN <buffer ptr:r1> <buffer size:r2> <bit size:r3> -> <bytes read:r0>
    PEEK_IN # PEEK_IN <buffer ptr:r1> <buffer size:r2> <bit size:r3> -> <bytes read:r0>
    WRITE_OUT # WRITE_OUT <buffer ptr:r1> <buffer size:r2> <bit size:r3> -> <bytes written:r0>
    ALLOCATE # ALLOCATE <buffer size:r1> -> <buffer ptr:r0>
    BTOI # BTOI <buffer ptr:r1> <buffer size:r2> -> <integer:r0>
    ITOB # ITOB <buffer ptr:r1> <buffer size:r2> <integer:r3> -> <bytes written:r0>

FUNC_ENTRY_MAGIC ::= 0xdeadbeefaabbccdd

format Op2Inst:
    op :Op2
    if op == Op2.RET || op == Op2.NOP:
        ..
    elif op == Op2.FUNC_ENTRY:
        magic :u64(FUNC_ENTRY_MAGIC)
    elif op == Op2.JMP || op == Op2.CALL || op == Op2.POP:
        to :Register
    elif op == Op2.SYSCALL_IMMEDIATE:
        syscall_number :SyscallNumber
    elif op == Op2.JMPIF:
        condition :Register
        to :Register
    elif op == Op2.PUSH:
        from :Register
    elif op == Op2.PUSH_IMMEDIATE:
        immediate :u64
    elif op == Op2.TRSF:
        from :Register
        to :Register
    elif op == Op2.LOAD_MEMORY || op == Op2.STORE_MEMORY:
        from :Register
        to :Register
        size :u64
    elif op == Op2.LOAD_IMMEDIATE:
        immediate :u64
        to :Register
    elif op == Op2.NOT || op == Op2.INC || op == Op2.DEC || op == Op2.NEG:
        operand :Register
        result :Register
    else: # binary
        left :Register
        right :Register
        result :Register
