
config.cpp.namespace = "brgen::ast"

enum Follow:
    unknown   # not analyzed or not a target
    end       # end of struct
    fixed     # fixed size (like [4]u8)
    constant  # constant value (like "a")
    normal    # otherwise

enum BinaryOp:
    mul = "*"
    div = "/"
    mod = "%"
    left_arithmetic_shift = "<<<"
    right_arithmetic_shift = ">>>"
    left_logical_shift = "<<"
    right_logical_shift = ">>"
    bit_and = "&"
    add = "+"
    sub = "-"
    bit_or = "|"
    bit_xor = "^"
    equal = "=="
    not_equal = "!="
    less = "<"
    less_or_eq = "<="
    grater = ">"
    grater_or_eq = ">="

    logical_and = "&&"

    logical_or = "||"

    cond_op1 = "?"
    cond_op2 = ":"

    range_exclusive = ".."
    range_inclusive = "..="

    assign = "="
    define_assign = ":="
    const_assign = "::="
    add_assign = "+="
    sub_assign = "-="
    mul_assign = "*="
    div_assign = "/="
    mod_assign = "%="
    left_logical_shift_assign = "<<="
    right_logical_shift_assign = ">>="
    left_arithmetic_shift_assign = "<<<="
    right_arithmetic_shift_assign = ">>>="
    bit_and_assign = "&="
    bit_or_assign = "|="
    bit_xor_assign = "^="

    comma = ","
    in_assign = "in"

enum UnaryOp:
    not_ = "!"
    minus_sign = "-"

enum BitAlignment:
    byte_aligned
    bit_1
    bit_2
    bit_3
    bit_4
    bit_5
    bit_6
    bit_7
    not_target
    not_decidable

enum ConstantLevel:
    unknown            # not determined
    constant           # decided at compile time
    immutable_variable # decided at runtime, but not changed
    variable           # changed at runtime

enum IdentUsage:
    unknown
    bad_ident
    reference
    define_variable
    define_const
    define_field
    define_format
    define_state
    define_enum
    define_enum_member
    define_fn
    define_cast_fn
    define_arg
    reference_type
    reference_member
    reference_member_type
    maybe_type
    reference_builtin_fn


enum Endian:
    unspec
    big
    little

enum IOMethod:
    unspec
    output_put
    input_peek
    input_get
    input_backward
    input_offset
    input_bit_offset
    input_remain
    input_subrange
    config_endian_little
    config_endian_big
    config_endian_native
    config_bit_order_lsb
    config_bit_order_msb

enum OrderType:
    # byte order
    # if input is 0x12345678:
    #   config.endian.big: 0x12 0x34 0x56 0x78 
    #   config.endian.little: 0x78 0x56 0x34 0x12
    byte
    # input stream bit order
    # if input byte is 0xC0
    # interpret as bit stream:
    #   config.bit_order.msb: 1 1 0 0 0 0 0 0 
    #   config.bit_order.lsb: 0 0 0 0 0 0 1 1 
    bit_stream 
    # bit mapping order
    # if input bit stream is 1 1 0 0 0 0 0 0
    # mapping to byte: 
    #   config.bit_order.msb: 0xC0 
    #   config.bit_order.lsb: 0x03
    # bit_input and bit_mapping is used together
    # for example if input is 0xC0:
    #   bit_stream             bit_mapping           byte
    #   config.bit_order.msb, config.bit_order.msb: 0xC0
    #   config.bit_order.lsb, config.bit_order.lsb: 0xC0
    #   config.bit_order.msb, config.bit_order.lsb: 0x03
    #   config.bit_order.lsb, config.bit_order.msb: 0x03
    bit_mapping 
    # specify both bit_input and bit_mapping
    bit_both
    
enum SpecialLiteralKind:
    input_ = "input"
    output_ = "output"
    config_  = "config"
 

# BlockTrait is used to determine the block's layout
enum BlockTrait:
    :u32
    # none, empty block
    none = 0
    # int and enum is used
    fixed_primitive = 1 << 0
    # floating point is used
    fixed_float = 1 << 1
    # fixed length array
    fixed_array = 1 << 2
    # variable length array
    variable_array = 1 << 3
    # struct
    struct_ = 1 << 4
    # conditional union
    conditional = 1 << 5
    # peek operation (input.peek() or field :Type(input.peek = true))
    static_peek = 1 << 6
    # bit field
    bit_field = 1 << 7
    # reading state variable
    read_state = 1 << 8
    # writing state variable
    write_state = 1 << 9
    # terminal pattern
    terminal_pattern = 1 << 10
    # bit stream required 
    bit_stream = 1 << 11
    # dynamic configuration required
    dynamic_order = 1 << 12
    # full input required (required subrange with offset syntax)
    full_input = 1 << 13
    # backward input required
    backward_input = 1 << 14
    # magic value
    magic_value = 1 << 15
    # assertion exists
    assertion = 1 << 16
    # explicit error
    explicit_error = 1 << 17
    # procedural method invocation
    procedural = 1 << 18
    # for loop
    for_loop = 1 << 19
    # local variable
    local_variable = 1 << 20
    # description only (cannot be used for code generating because of incomplete information)
    description_only = 1 << 21
    # uncommon size (like 3 bytes integer) field exists
    uncommon_size = 1 << 22


enum FieldArgumentMapping:
    :u32
    none = 0
    # same type (i.e :u8(0), :[]u8(<[]u8>(0,1)) )
    direct = 1 << 0
    # element repeat (i.e :[]u8(0))
    repeat = 1 << 1
    # some candidate (i.e :u8(0,1,2), :[]u8(<[]u8>(0,1,2),<[]u8>(3,4,5)) )
    some_candidate = 1 << 2 
    # if repeat and some candidate is used together
    