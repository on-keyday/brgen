
config.cpp.namespace = "brgen::vm"


enum Op:
    :u8
    NOP

    # artihmetic
    ADD
    SUB
    MUL
    DIV
    MOD
    AND
    OR
    XOR
    NOT
    SHL
    SHR
    INC
    DEC
    NEG

    # compare and jump
    CMP
    JMP
    JE
    JNE
    JG
    JGE
    JL
    JLE
    CALL
    RET

    # stack
    PUSH # PUSH <register number>
    POP # POP <register number>

    # memory and register
    TRSF # TRSF <from register number> << 4 | <register number>
    LOAD_IMMEDIATE # LOAD_IMMEDIATE <immediate value>
    SET_VAR_COUNT

    LOAD_STATIC

    # variable control
    INIT_VARIABLE # INIT_VARIABLE <variable index>
    LOAD_VARIABLE # LOAD_VARIABLE <from variable register number> << 4 | <to register number>
    STORE_VARIABLE # STORE_VARIABLE <from register number> << 4 | <to variable register number>

    # object control
    MAKE_OBJECT # MAKE_OBJECT <register number>
    SET_FIELD_LABEL # SET_FIELD_LABEL <field index> << 8 | <from label register number> << 4 | <to object register number>
    SET_FIELD # SET_FIELD <field index> << 8 | <from register number> << 4 | <to object register number>
    GET_FIELD # GET_FIELD <field index> << 8 | <from object register number> << 4 | <to register number>
    
    # array control
    MAKE_ARRAY # MAKE_ARRAY <register number>
    SET_ARRAY # SET_ARRAY <array index register number> << 8 | <from register number> << 4 | <to array register number>
    GET_ARRAY # GET_ARRAY <array index register number> << 8 | <from array register number> << 4 | <to register number>

    # input and output 
    GET_OFFSET # get offset of input/output
    SET_OFFSET # set offset of input/output
    READ_BYTES # read from input
    PEEK_BYTES # peek from input
    WRITE_BYTES # write to output
    READ_BITS # read from input
    PEEK_BITS # peek from input
    WRITE_BITS # write to output

    # convert bytes to integer
    BYTES_TO_INT
    SET_ENDIAN
    

    # error
    ERROR
  
    # meta data
    NEXT_FUNC
    FUNC_NAME
    FUNC_END

format Instruction:
    op :Op
    arg :u64

format StaticData:
    len :u64
    data :[len]u8

format Code:
    instruction_len :u64
    instructions :[instruction_len]Instruction
    static_data_len :u64
    static_data :[static_data_len]StaticData
