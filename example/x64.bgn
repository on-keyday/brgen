config.url = "https://www.felixcloutier.com/x86/"
config.url = "http://ref.x86asm.net/coder64.html"

config.cpp.namespace = "brgen::x64"
input.endian = config.endian.little

enum Register:
    :u8
    RAX = 0
    RCX = 1
    RDX = 2
    RBX = 3
    RSP = 4
    RBP = 5
    RSI = 6
    RDI = 7
    R8 = 8 # extended register
    R9 = 9
    R10 = 10
    R11 = 11
    R12 = 12
    R13 = 13
    R14 = 14
    R15 = 15

# naming rule: dst_src
enum X64OpCode:
    :u8
    ADD_REG_REG = 0x01
    MUL_REG_REG = 0x0F
    TWO_BYTE_PREFIX = 0x0F
    CMP_REG_REG = 0x39
    PUSH_0 = 0x50
    PUSH_1 = 0x51
    PUSH_2 = 0x52
    PUSH_3 = 0x53
    PUSH_4 = 0x54
    PUSH_5 = 0x55
    PUSH_6 = 0x56
    PUSH_7 = 0x57
    POP_0 = 0x58
    POP_1 = 0x59
    POP_2 = 0x5A
    POP_3 = 0x5B
    POP_4 = 0x5C
    POP_5 = 0x5D
    POP_6 = 0x5E
    POP_7 = 0x5F
    JE_REL8 = 0x74
    JNE_REL8 = 0x75
    ADD_REG_IMM = 0x81
    
    NOP = 0x90
    
    
    MOV_REG_REG_OR_MEM_REG = 0x89 
    MOV_REG_MEM = 0x8B
    MOV_REG_IMM_0 = 0xB8
    MOV_REG_IMM_1 = 0xB9
    MOV_REG_IMM_2 = 0xBA
    MOV_REG_IMM_3 = 0xBB
    MOV_REG_IMM_4 = 0xBC
    MOV_REG_IMM_5 = 0xBD
    MOV_REG_IMM_6 = 0xBE
    MOV_REG_IMM_7 = 0xBF
    RET = 0xC3
    MOV_MEM_IMM = 0xC7
    SHL_REG_IMM = 0xC1
    SHL_REG_CL = 0xD3
    CALL = 0xE8
    JMP_REL6 = 0xE9
    INVALID_1 = 0xEA
    CALL_REG = 0xFF
    
 

format RexPrefix:
    prefix :u4(0b0100)
    extend_operand_size :u1 # w
    extend_mod_r_m_reg :u1 # r
    sib_index_field_bit4 :u1 # x
    extend_r_m_or_base :u1 # b

enum ModRMMode:
    :u2
    MEM = 0b00
    MEM_DISP8 = 0b01
    MEM_DISP32 = 0b10
    REG = 0b11

format ModRM:
    mod :ModRMMode
    reg :u3
    rm :u3

format SIB:
    scale :u2
    index :u3
    base :u3

format AVX3bytePrefix:
    prefix :u8(0b1100100)
    r :u1
    x :u1
    b :u1
    mmmmm :u5
    w :u1
    vvvv :u4
    l :u1
    pp :u2

format AVX2bytePrefix:
    prefix :u8(0b11011001)
    r :u1
    vvvv :u4
    l :u1
    pp :u2


# mov reg, reg/[reg]
format MovRegRegOrMemReg32:
    opcode :X64OpCode(X64OpCode.MOV_REG_REG_OR_MEM_REG)
    mod_rm :ModRM

# mov reg, reg/[reg]
format MovRegRegOrMemReg64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.MOV_REG_REG_OR_MEM_REG)
    mod_rm :ModRM

# mov reg, imm
format MovRegImm64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.MOV_REG_IMM_0..=X64OpCode.MOV_REG_IMM_7)
    imm :u64

# mov reg, imm
format MovRegImm32:
    opcode :X64OpCode(X64OpCode.MOV_REG_IMM_0..=X64OpCode.MOV_REG_IMM_7)
    imm :u32

# mov reg, [reg]
format MovRegMem32:
    opcode :X64OpCode(X64OpCode.MOV_REG_MEM)
    mod_rm :ModRM
    if mod_rm.mod == ModRMMode.MEM_DISP8 || mod_rm.mod == ModRMMode.MEM_DISP32 || 
       mod_rm.rm == u3(Register.RSP) || mod_rm.rm == u3(Register.RBP):
        sib :SIB

# mov reg, [reg]
format MovRegMem64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.MOV_REG_MEM)
    mod_rm :ModRM
    if mod_rm.mod == ModRMMode.MEM_DISP8 || mod_rm.mod == ModRMMode.MEM_DISP32 || 
       mod_rm.rm == u3(Register.RSP) || mod_rm.rm == u3(Register.RBP):
        sib :SIB

# mov [reg], imm
format MovMemImm32:
    opcode :X64OpCode(X64OpCode.MOV_MEM_IMM)
    mod_rm :ModRM
    imm :u32

# mov [reg], imm
format MovMemImm64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.MOV_MEM_IMM)
    mod_rm :ModRM
    imm :u64

# nop
format Nop:
    opcode :X64OpCode(X64OpCode.NOP)

# ret
format Ret:
    opcode :X64OpCode(X64OpCode.RET)

# call imm
format Call:
    opcode :X64OpCode(X64OpCode.CALL)
    imm :u32

format Push:
    opcode :X64OpCode(X64OpCode.PUSH_0..=X64OpCode.PUSH_7)

format Pop:
    opcode :X64OpCode(X64OpCode.POP_0..=X64OpCode.POP_7)

format AddRegImm32:
    opcode :X64OpCode(X64OpCode.ADD_REG_IMM)
    mod_rm :ModRM
    imm :u32

format AddRegImm64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.ADD_REG_IMM)
    mod_rm :ModRM
    imm :u64

format AddRegReg32:
    opcode :X64OpCode(X64OpCode.ADD_REG_REG)
    mod_rm :ModRM

format AddRegReg64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.ADD_REG_REG)
    mod_rm :ModRM

format CmpRegReg32:
    opcode :X64OpCode(X64OpCode.CMP_REG_REG)
    mod_rm :ModRM

format CmpRegReg64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.CMP_REG_REG)
    mod_rm :ModRM

format JeRel8:
    opcode :X64OpCode(X64OpCode.JE_REL8)
    imm :s8

format JneRel8:
    opcode :X64OpCode(X64OpCode.JNE_REL8)
    imm :s8

format CallReg32:
    opcode :X64OpCode(X64OpCode.CALL_REG)
    mod_rm :ModRM

format CallReg64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.CALL_REG)
    mod_rm :ModRM

format ShlRegImm32:
    opcode :X64OpCode(X64OpCode.SHL_REG_IMM)
    mod_rm :ModRM
    imm :u8

format ShlRegImm64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.SHL_REG_IMM)
    mod_rm :ModRM
    imm :u8


format ShlRegCl32:
    opcode :X64OpCode(X64OpCode.SHL_REG_CL)
    mod_rm :ModRM

format ShlRegCl64:
    rex_prefix :RexPrefix
    opcode :X64OpCode(X64OpCode.SHL_REG_CL)
    mod_rm :ModRM


format Instruction:
    match:
        .. => nop :Nop
        .. => ret :Ret
        .. => call :Call
        .. => mov_reg_reg_or_mem_reg :MovRegRegOrMemReg32
        .. => mov_reg_reg_or_mem_reg :MovRegRegOrMemReg64
        .. => mov_reg_imm :MovRegImm32
        .. => mov_reg_imm :MovRegImm64
        .. => mov_reg_mem :MovRegMem32
        .. => mov_reg_mem :MovRegMem64
        .. => mov_mem_imm :MovMemImm32
        .. => mov_mem_imm :MovMemImm64
        .. => error("Unsupport instruction")
