config.go.package = "ether"
format TCPHeader:
    srcPort :u16
    dstPort :u16
    seqNum :u32
    ackNum :u32
    dataOffset :u4
    reserved :u4
    CWR :u1 ECE :u1 URG :u1 ACK :u1 PSH :u1 RST :u1 SYN :u1 FIN :u1
    windowSize :u16
    checksum :u16
    urgentPointer :u16
    options :[..]TCPOption(input = input.subrange(u8(dataOffset*4)-20))

format TCPSegment:
    hdr :TCPHeader
    payload :[..]u8

enum TCPState:
    CLOSED
    LISTEN
    SYN_SENT
    SYN_RCVD
    ESTABLISHED
    FIN_WAIT_1
    FIN_WAIT_2
    CLOSE_WAIT
    CLOSING
    LAST_ACK
    TIME_WAIT

enum TCPOptionKind:
    :u8
    END_OF_OPTIONS_LIST = 0
    NOP = 1
    MAXIMUM_SEGMENT_SIZE = 2
    WINDOW_SCALE = 3
    SACK_PERMITTED = 4
    SACK = 5
    TIMESTAMP = 8
    MPTCP = 30


format TCPOption:
    kind :TCPOptionKind
    match kind:
        TCPOptionKind.END_OF_OPTIONS_LIST => ..
        TCPOptionKind.NOP => ..
        TCPOptionKind.MAXIMUM_SEGMENT_SIZE:
            length :u8
            length == 4
            mss :u16    
        TCPOptionKind.WINDOW_SCALE:
            length :u8
            length == 3
            shiftCount :u8
        TCPOptionKind.SACK_PERMITTED: 
            length :u8
            length == 2
        TCPOptionKind.SACK:
            length :u8
            length >= 2
            sack :Sack(input = input.subrange(length-2))  
        TCPOptionKind.TIMESTAMP:
            length :u8
            length == 10
            timestamp :Timestamp(input = input.subrange(length-2))  
        ..:
            length :u8
            length >= 2
            data :[length-2]u8
            

format SackBlock:
    left :u32
    right :u32

format Sack:
    blocks :[..]SackBlock

format Timestamp:
    value :u32
    echoReply :u32
