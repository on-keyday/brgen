
enum BGPType:
    :u8
    open = 1
    update = 2
    notification = 3
    keepalive = 4

format BGPHeader:
    marker :"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    length :u16
    type   :BGPType

format BGPPacket:
    header :BGPHeader
    header.length >= 19
    match header.type:
        BGPType.open => open :Open(input=input.subrange(header.length-19))
        BGPType.update => update :Update(input=input.subrange(header.length-19))
        BGPType.notification => notification :Notification(input=input.subrange(header.length-19))
        BGPType.keepalive => header.length == 19

format Open:
    version :u8
    as      :u16
    hold    :u16
    id      :u32
    optlen  :u8
    options     :[..]Option(input=input.subrange(optlen))

format Option:
    type :u8
    len  :u8
    data :[len]u8

format WithdrawnRoutes:
    len :u16
    data :[..]u8(input=input.subrange(len))

format PathAttrs:
    len :u16
    data :[..]PathAttribute(input=input.subrange(len))

format Update:
    withdrawn_routes :WithdrawnRoutes
    path_attr :PathAttrs
    network_reachability_info      :[..]NetWorkReachabilityInfo


format Withdrawn:
    len :u16
    data :[len]u8

format AttributeType:
    option :u1
    transitive :u1
    partial :u1
    extended :u1
    reserved :u4(0)
    code  :u8

format PathAttribute:
    type :AttributeType
    if type.extended == 1:
        len :u16
    else:
        len :u8
    len_tmp ::= len # FIX: len_tmp is temporary used
    data :[len_tmp]u8

format NetWorkReachabilityInfo:
    prefixlen :u8
    prefix    :[prefixlen]u8

format Notification:
    code :u8
    subcode :u8
    data :[..]u8



