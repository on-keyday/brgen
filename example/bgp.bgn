
enum BGPType:
    :u8
    open = 1
    update = 2
    notification = 3
    keepalive = 4

format BGPHeader:
    marker :"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    length :u16
    type   :BGPType

format BGPPacket:
    header :BGPHeader
    header.length >= 19
    match header.type:
        BGPType.open => open :Open(input=input.subrange(header.length-19))
        BGPType.update => update :Update(input=input.subrange(header.length-19))
        BGPType.notification => notification :Notification(input=input.subrange(header.length-19))
        BGPType.keepalive => header.length == 19

format Open:
    version :u8
    as      :u16
    hold    :u16
    id      :u32
    optlen  :u8
    options     :[..]BGPOption(input=input.subrange(optlen))

enum BGPOptionType:
    :u8
    capability = 2

format BGPOption:
    type :BGPOptionType
    len  :u8
    data :[len]u8

format WithdrawnRoute:
    bits :u16
    in_byte ::= (bits + 7) / 8
    prefix :[..]u8(input=input.subrange(in_byte))

format WithdrawnRoutes:
    len :u16
    data :[..]WithdrawnRoute(input=input.subrange(len))

format PathAttributes:
    len :u16
    data :[..]PathAttribute(input=input.subrange(len))

format Update:
    withdrawn_routes :WithdrawnRoutes
    path_attr :PathAttributes
    if path_attr.len > 0:
        network_reachability_info      :[..]NetWorkReachabilityInfo




config.url = "https://www.iana.org/assignments/bgp-parameters/bgp-parameters.xhtml#bgp-parameters-1"
enum AttributeCode:
    :u8
    ORIGIN = 1
    AS_PATH = 2
    NEXT_HOP = 3
    MULTI_EXIT_DISC = 4
    LOCAL_PREF = 5
    ATOMIC_AGGREGATE = 6
    AGGREGATOR = 7
    COMMUNITIES = 8
    ORIGINATOR_ID = 9
    CLUSTER_LIST = 10
    DPA_deprecated = 11
    ADVERTISER_deprecated = 12
    RCID_PATH_deprecated = 13
    MP_REACH_NLRI = 14
    MP_UNREACH_NLRI = 15
    EXTENDED_COMMUNITIES = 16
    AS4_PATH = 17
    AS4_AGGREGATOR = 18
    SSA_deprecated = 19
    ConnectorAttribute_deprecated = 20
    AS_PATHLIMIT_deprecated = 21
    PMSI_TUNNEL = 22
    TunnelEncap = 23
    TrafficEngineering = 24
    IPv6AddressSpecificExtendedCommunity = 25
    AIGP = 26
    PE_DISTINGUISHER_LABEL = 27
    BGP_LS = 29
    LargeCommunity = 32
    BGPsec_Path = 33
    OnlyForORF = 35
    BGP_Domain_Path = 36
    SFP_Attribute = 37
    BFD_Discriminator = 38
    BGP_Prefix_SID = 40
    BIER = 41
    ATTR_SET = 128
    ReservedForDevelopment = 255



format AttributeType:
    option :u1
    transitive :u1
    partial :u1
    extended :u1
    reserved :u4(0)
    code  :AttributeCode

format PathAttribute:
    type :AttributeType
    if type.extended == 1:
        len :u16
    else:
        len :u8
    len_tmp ::= u16(len) # FIX: len_tmp is temporary used
    match type.code:
        AttributeCode.ORIGIN => origin :Origin(input=input.subrange(len_tmp))
        AttributeCode.AS_PATH => as_path :AsPath(input=input.subrange(len_tmp))
        AttributeCode.NEXT_HOP => next_hop :[4]u8(input=input.subrange(len_tmp))
        AttributeCode.MULTI_EXIT_DISC => multi_exit_disc :u32(input=input.subrange(len_tmp))
        AttributeCode.LOCAL_PREF => local_pref :u32(input=input.subrange(len_tmp))
        AttributeCode.ATOMIC_AGGREGATE => len_tmp == 0
        AttributeCode.AGGREGATOR => aggregator :Aggregator(input=input.subrange(len_tmp))
        .. => data :[len_tmp]u8

enum AsPathSegmentType:
    :u8
    AS_SET = 1
    AS_SEQUENCE = 2
    AS_CONFED_SEQUENCE = 3
    AS_CONFED_SET = 4


format Aggregator:
    as :u16
    addr :[..]u8

enum Origin:
    :u8
    IGP = 0
    EGP = 1
    INCOMPLETE = 2

format AsPath:
    segments :[..]AsPathSegment

format AsPathSegment:
    type :AsPathSegmentType
    len  :u8
    data :[len]u16

format NetWorkReachabilityInfo:
    prefixlen :u8
    prefix    :[prefixlen]u8

format Notification:
    code :u8
    subcode :u8
    data :[..]u8



