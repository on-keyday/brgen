
config.go.package = "bgp"
enum BGPType:
    :u8
    open = 1
    update = 2
    notification = 3
    keepalive = 4

format BGPHeader:
    marker :"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    length :u16
    type   :BGPType

format BGPPacket:
    header :BGPHeader
    header.length >= 19
    match header.type:
        BGPType.open => open :Open(input=input.subrange(header.length-19))
        BGPType.update => update :Update(input=input.subrange(header.length-19))
        BGPType.notification => notification :Notification(input=input.subrange(header.length-19))
        BGPType.keepalive => header.length == 19

format Open:
    version :u8
    as      :u16
    hold    :u16
    id      :u32
    optlen  :u8
    options     :[..]BGPOption(input=input.subrange(optlen))

enum BGPOptionType:
    :u8
    capability = 2

format BGPOption:
    type :BGPOptionType
    len  :u8
    data :[len]u8

format WithdrawnRoute:
    bits :u16
    in_byte ::= (bits + 7) / 8
    prefix :[..]u8(input=input.subrange(in_byte))

format WithdrawnRoutes:
    len :u16
    data :[..]WithdrawnRoute(input=input.subrange(len))

format PathAttributes:
    len :u16
    data :[..]PathAttribute(input=input.subrange(len))

format Update:
    withdrawn_routes :WithdrawnRoutes
    path_attr :PathAttributes
    if path_attr.len > 0:
        network_reachability_info      :[..]NetWorkReachabilityInfo




config.url = "https://www.iana.org/assignments/bgp-parameters/bgp-parameters.xhtml#bgp-parameters-1"
enum AttributeCode:
    :u8
    ORIGIN = 1
    AS_PATH = 2
    NEXT_HOP = 3
    MULTI_EXIT_DISC = 4
    LOCAL_PREF = 5
    ATOMIC_AGGREGATE = 6
    AGGREGATOR = 7
    COMMUNITIES = 8
    ORIGINATOR_ID = 9
    CLUSTER_LIST = 10
    DPA_deprecated = 11
    ADVERTISER_deprecated = 12
    RCID_PATH_deprecated = 13
    MP_REACH_NLRI = 14
    MP_UNREACH_NLRI = 15
    EXTENDED_COMMUNITIES = 16
    AS4_PATH = 17
    AS4_AGGREGATOR = 18
    SSA_deprecated = 19
    ConnectorAttribute_deprecated = 20
    AS_PATHLIMIT_deprecated = 21
    PMSI_TUNNEL = 22
    TunnelEncap = 23
    TrafficEngineering = 24
    IPv6AddressSpecificExtendedCommunity = 25
    AIGP = 26
    PE_DISTINGUISHER_LABEL = 27
    BGP_LS = 29
    LargeCommunity = 32
    BGPsec_Path = 33
    OnlyForORF = 35
    BGP_Domain_Path = 36
    SFP_Attribute = 37
    BFD_Discriminator = 38
    BGP_Prefix_SID = 40
    BIER = 41
    ATTR_SET = 128
    ReservedForDevelopment = 255



format AttributeType:
    option :u1
    transitive :u1
    partial :u1
    extended :u1
    reserved :u4(0)
    code  :AttributeCode

format PathAttribute:
    type :AttributeType
    if type.extended == 1:
        len :u16
    else:
        len :u8
    len_tmp ::= u16(len) # FIX: len_tmp is temporary used
    match type.code:
        AttributeCode.ORIGIN => origin :Origin(input=input.subrange(len_tmp))
        AttributeCode.AS_PATH => as_path :AsPath(input=input.subrange(len_tmp))
        AttributeCode.NEXT_HOP => next_hop :[4]u8(input=input.subrange(len_tmp))
        AttributeCode.MULTI_EXIT_DISC => multi_exit_disc :u32(input=input.subrange(len_tmp))
        AttributeCode.LOCAL_PREF => local_pref :u32(input=input.subrange(len_tmp))
        AttributeCode.ATOMIC_AGGREGATE => len_tmp == 0
        AttributeCode.AGGREGATOR => aggregator :Aggregator(input=input.subrange(len_tmp))
        AttributeCode.COMMUNITIES => communities :[..]u32(input=input.subrange(len_tmp))
        AttributeCode.EXTENDED_COMMUNITIES => extended_communities :[..]ExtendedCommunity(input=input.subrange(len_tmp))
        AttributeCode.BGP_LS => bgp_ls :LinkStateNLRI(input=input.subrange(len_tmp))
        AttributeCode.MP_REACH_NLRI => mp_reach_nlri :MPReachNLRI(input=input.subrange(len_tmp))
        AttributeCode.MP_UNREACH_NLRI => mp_unreach_nlri :MPReachNLRI(input=input.subrange(len_tmp))
        .. => data :[len_tmp]u8

enum AsPathSegmentType:
    :u8
    AS_SET = 1
    AS_SEQUENCE = 2
    AS_CONFED_SEQUENCE = 3
    AS_CONFED_SET = 4


format Aggregator:
    as :u16
    addr :[..]u8

enum Origin:
    :u8
    IGP = 0
    EGP = 1
    INCOMPLETE = 2

format AsPath:
    segments :[..]AsPathSegment

format AsPathSegment:
    type :AsPathSegmentType
    len  :u8
    data :[len]u16

format NetWorkReachabilityInfo:
    prefixlen :u8
    prefix    :[prefixlen]u8

format Notification:
    code :u8
    subcode :u8
    data :[..]u8


config.url = "https://www.rfc-editor.org/rfc/rfc9552.html#name-the-bgp-ls-attribute"

format LSTLV:
    type :u16
    length :u16
    value :[length]u8

enum NLRIType:
    :u16
    NodeNLRI = 1
    LinkNLRI = 2
    IPv4TopologyPrefix = 3
    IPv6TopologyPrefix = 4

format LinkStateNLRI:
    nlri_type :NLRIType
    nlri_length :u16
    match nlri_type:
        NLRIType.NodeNLRI => node_nlri :NodeNLRI(input=input.subrange(nlri_length))
        NLRIType.LinkNLRI => link_nlri :LinkNLRI(input=input.subrange(nlri_length))
        NLRIType.IPv4TopologyPrefix => prefix_nlri :PrefixNLRI(input=input.subrange(nlri_length))
        NLRIType.IPv6TopologyPrefix => prefix_nlri :PrefixNLRI(input=input.subrange(nlri_length))
        .. => data :[nlri_length]u8

enum SubTLVType:
    :u16
    MultiTopologyID = 263
    OSPFRouteType = 264
    IPReachabilityInformation = 265
    AutonomousSystem = 512
    BGPLSID = 513
    OSPFAreaID = 514
    IGPRouterID = 515

format NodeNLRI:
    protocol_id :u8
    identifier :u64
    local_node_descriptors :NodeDescriptors

format LinkNLRI:
    link_local_id :u32
    local_node_descriptors :NodeDescriptors
    remote_node_descriptors :NodeDescriptors
    link_descriptors :LinkDescriptors

format PrefixNLRI:
    protocol_id :u8
    identifier :u64
    local_node_descriptors :NodeDescriptors
    prefix_descriptors :PrefixDescriptors

format LinkDescriptors:
    type :u16
    length :u16
    descriptor :[..]LinkDescriptorSubTLV(input=input.subrange(length))

format LinkDescriptorSubTLV:
    type :u16
    length :u16
    data :[length]u8 # FIX: data is temporary used


format NodeDescriptors: # remote or local
    type :u16
    length :u16
    descriptor :[..]NodeDescriptorSubTLV(input=input.subrange(length))



format NodeDescriptorSubTLV:
    type :SubTLVType
    length :u16
    match  type:
        SubTLVType.AutonomousSystem => autonomous_system :[4]u8(input=input.subrange(length))
        SubTLVType.OSPFAreaID => bgp_ls_identifier :[4]u8(input=input.subrange(length))
        SubTLVType.BGPLSID => ospf_area_id :[4]u8(input=input.subrange(length))
        SubTLVType.IGPRouterID => igp_router_id :[length]u8
        .. => data :[length]u8

format PrefixDescriptors:
    type :u16
    length :u16
    descriptor :[..]PrefixDescriptorSubTLV(input=input.subrange(length))



format PrefixDescriptorSubTLV:
    type :SubTLVType
    length :u16
    match type:
        SubTLVType.MultiTopologyID => multi_topology_identifier :MultiTopologyIDList(input=input.subrange(length))
        SubTLVType.OSPFRouteType => ospf_route_type :OSPFRouteType(input=input.subrange(length))
        SubTLVType.IPReachabilityInformation => ip_reachability_information :IPReachabilityInformation(input=input.subrange(length))
        .. => data :[length]u8

format MultiTopologyID:
    reserved :u4
    mt_id :u12

format MultiTopologyIDList:
    mt_ids :[..]MultiTopologyID

enum OSPFRouteType:
    :u8
    IntraAreaPrefix = 1
    InterAreaPrefix = 2
    External1 = 3
    External2 = 4
    NSSA1 = 5
    NSSA2 = 6

format IPReachabilityInformation:
    prefix_length :u8
    prefix :[..]u8

format NodeFlagBits:
    overload :u1
    attached :u1
    external :u1
    abr :u1
    router :u1
    v6 :u1
    reserved :u2

format ISISAreaIdentifier:
    area_id :[..]u8

format NodeName:
    name :[..]u8

format OpaqueNode:
    node_attributes :[..]LSTLV

format MPLSProtocolMask:
    label_distribution_protocol :u1 
    extension_to_rsvp_for_lsp_tunnel :u1
    reserved :u6

format OpaqueLink:
    link_attributes :[..]LSTLV

format LinkName:
    name :[..]u8

format IGPFlags:
    isis_up_down :u1
    ospf_no_unicast :u1
    ospf_no_local_address :u1
    ospf_propagate_nssa :u1
    reserved :u4

format RouteTags: # IGP or Extended IGP Route Tags
    tags :[..]u32

format PrefixMetric:
    metric :u32

format OSPFForwardingAddress:
    forwarding_address :[..]u8

format OpaquePrefixAttribute:
    prefix_attributes :[..]u8

config.url = "https://tex2e.github.io/rfc-translater/html/rfc4360.html"

format ExtendedCommunity:
    type :u8
    subtype :u8
    data :[6]u8

config.url = "https://datatracker.ietf.org/doc/draft-ietf-idr-bgp-ls-sr-policy/02/"

format SRPolicyCandidatePathNLRI:
    protocol_id :u8
    identifier :u64
    local_node_descriptors :NodeDescriptors
    candidate_path_descriptors :CandidatePathDescriptors

format CandidatePathDescriptors:
    descriptor :[..]CandidatePathDescriptorSubTLV

format CandidatePathDescriptorSubTLV:
    type :u16
    length :u16
    data :[length]u8  

format SRPolicyCandidatePathDescriptor:
    protocol_origin :u8 
    endpoint_as_ipv6 :u1
    originator_as_ipv6 :u1
    reserved1 :u6
    reserved2 :u16
    endpoint_len ::= endpoint_as_ipv6 == 1 ? 16 : 4
    endpoint :[endpoint_len]u8
    policy_color :u32
    originator_as_number :u32
    originator_len ::= originator_as_ipv6 == 1 ? 16 : 4
    originator_address :[originator_len]u8
    discriminator :u32




format SRBindingSID:
    dataplane_as_srv6 :u1
    allocation :u1
    unavailable :u1
    local_block :u1
    fallback :u1
    reserved1 :u11
    reserved2 :u16
    sid_len ::= dataplane_as_srv6 == 1 ? 16 : 4
    binding_sid :[sid_len]u8
    specified_binding_sid :[sid_len]u8

format SRv6BindingSID:
    allocation :u1
    unavailable :u1
    fallback :u1
    reserved1 :u13
    reserved2 :u16
    binding_sid :[16]u8
    specified_binding_sid :[16]u8
    sub_tlvs :[..]SRv6BindingSIDSubTLV

format SRv6BindingSIDSubTLV:
    type :u16
    length :u16
    data :[length]u8

format SRCandidatePathState:
    priority :u8
    reserved :u8
    is_administrative :u1 # S
    is_active :u1 # A
    is_backup :u1 # B
    evaluated_for_validity :u1 # E
    least_one_sid_list :u1 # V
    due_to_on_demand_next_hop_trigger :u1 # O
    delegated :u1 # D
    provisioned :u1 # C
    drop_upon_invalid :u1 # I
    eligible_for_transit_policy :u1 # T
    sr_policy_drop_upon_invalid :u1 # U
    reserved2 :u5
    preference :u32

format SRPolicyName:
    name :[..]u8

format SRCandidatePathName:
    name :[..]u8

format SRCandidateConstraints:
    use_srv6_data_plane :u1 # D
    only_protected_sids :u1 # P
    only_unprotected_sids :u1 # U
    only_use_specified_algorithm :u1 # A
    only_use_specified_topology :u1 # T
    strict_constraints :u1 # S
    fixed :u1 # F
    hop_by_hop :u1 # H
    reserved1 :u8
    reserved2 :u16
    mtid :u16
    algorithm :u8
    reserved3 :u8
    sub_tlvs :[..]SRCandidateConstraintsSubTLV

format SRCandidateConstraintsSubTLV:
    type :u16
    length :u16
    data :[length]u8

format SRAffinityConstraint:
    excl_any_size :u8
    inc_any_size :u8
    incl_all_size :u8
    reserved :u8
    excl_any :[excl_any_size]u32
    inc_any :[inc_any_size]u32
    incl_all :[incl_all_size]u32

format SRSRLGConstraint:
    srlg :[..]u32

format SRBandwidthConstraint:
    bandwidth :u32

format SRDisjointGroup:
    srlg_disjointness_requested :u1 # S
    node_disjointness_requested:u1 # N
    link_disjointness_requested :u1 # L
    fallback_requested :u1 # F
    fallback_to_default_requested :u1 # I
    reserved1 :u3
    srlg_disjointness_achieved :u1 # S
    node_disjointness_achieved :u1 # N
    link_disjointness_achieved :u1 # L
    fallback_achieved :u1 # F
    fallback_to_default_achieved :u1 # I
    could_not_be_acheived :u1 # X
    reserved2 :u2
    reserved3 :u16
    disjointness_group_id :[..]u8

format SRBidirectionalGroupConstraint:
    is_reserve_path :u1 # R
    co_routed :u1 # C
    reserved1 :u14
    reserved2 :u16
    bidi_group_id :[..]u8

format SRMetricConstraint:
    metric_type :u8
    optimization :u1 # O
    margin_allowed :u1 # M
    absolute_margin :u1 # A
    bound_allowed :u1 # B
    reserved1 :u4
    metric_margin :u32
    metric_bound :u32

format MPReachNLRI:
    address_family :u16
    sub_seq_addr_family_id :u8
    next_hop_len :u8
    next_hop :[next_hop_len]u8
    reserved :u8
    nlri :[..]NetWorkReachabilityInfo

format MPUnreachNLRI:
    address_family :u16
    sub_seq_addr_family_id :u8
    nlri :[..]NetWorkReachabilityInfo

enum AFI:
    :u16
    IPv4 = 1
    IPv6 = 2
    L2VPN = 25
    Opaque = 16397
    LS = 16388

enum SAFI:
    :u8 
    Unicast = 1
    Multicast = 2
    MPLS_LABEL = 4
    ENCAPSULATION = 7
    VPLS = 65
    EVPN = 70
    LS = 71
    SRPOLICY = 73
    MUP = 73
    MPLS_VPN = 128
    MPLS_VPN_MULTICAST = 129
    ROUTE_TARGET_CONSTRAINTS = 132
    FLOW_SPEC_UNICAST = 133
    FLOW_SPEC_VPN = 134
    KEY_VALUE = 241

format SRPolicyNLRI:
    length :u8 # in bits
    distinguisher :u32 
    color :u32 
    endpoint :[..]u8

enum BGPFlowSpecType:
    :u8 
    UNKNOWN = 0
    DST_PREFIX = 1
    SRC_PREFIX = 2
    IP_PROTO = 3
    PORT = 4
    DST_PORT = 5
    SRC_PORT = 6
    ICMP_TYPE = 7
    ICMP_CODE = 8
    TCP_FLAG = 9
    PKT_LEN = 10
    DSCP = 11
    FRAGMENT = 12
    LABEL = 13
    ETHERNET_TYPE = 14
    SRC_MAC = 15
    DST_MAC = 16
    LLC_DSAP = 17
    LLC_SSAP = 18
    LLC_CONTROL = 19
    SNAP = 20
    VID = 21
    COS = 22
    INNER_VID = 23
    INNER_COS = 24

format FlowSpecComponentItem:
    end :u1
    reserved :u1
    len :u2
    op :u4
    match len:
        0 => data :u8
        1 => data :u16
        2 => data :u32
        3 => data :u64 
        .. => error("Invalid length")

format FlowSpecComponentItems:
    items :[]FlowSpecComponentItem

    fn encode():
        for i in items.length:
            if i == items.length - 1:
                items[i].end == 1
            output.put(items[i])
 

    fn decode():
        for:
            item ::= input.get(FlowSpecComponentItem)
            end ::= item.end == 1
            items[items.length] = item
            if end:
                break


format FlowSpecNLRILength:
    length :u16 

    fn encode():
        if length < 0xf0:
            output.put(u8(length))
        elif length < 0xf000:
            output.put(0xf0 | u8(length >> 16))
            output.put(u8(length & 0xff))
        else:
            error("Length too big")

    fn decode():
        data ::= input.get(u8)
        if data < 0xf0:
            length = u16(data)
        else:
            data2 ::= input.get(u8)
            length = u16((data & 0xf) << 16 | data2)

format FlowSpecAddrPrefix:
    if route_family.afi == AFI.IPv4:
        prefix :[4]u8
    elif route_family.afi == AFI.IPv6:
        prefix :[16]u8
    else:
        error("Invalid AFI")

format FlowSpecMacAddr:
    addr :[6]u8

format FlowSpecComponent:
    type :BGPFlowSpecType
    match type:
        BGPFlowSpecType.DST_PREFIX => dst_prefix :FlowSpecAddrPrefix
        BGPFlowSpecType.SRC_PREFIX => src_prefix :FlowSpecAddrPrefix
        BGPFlowSpecType.DST_MAC => dst_mac :FlowSpecMacAddr
        BGPFlowSpecType.SRC_MAC => src_mac :FlowSpecMacAddr
        BGPFlowSpecType.IP_PROTO => ip_proto :FlowSpecComponent
        BGPFlowSpecType.PORT => port :FlowSpecComponent
        BGPFlowSpecType.DST_PORT => dst_port :FlowSpecComponent
        BGPFlowSpecType.SRC_PORT => src_port :FlowSpecComponent
        BGPFlowSpecType.ICMP_TYPE => icmp_type :FlowSpecComponent
        BGPFlowSpecType.ICMP_CODE => icmp_code :FlowSpecComponent
        BGPFlowSpecType.TCP_FLAG => tcp_flag :FlowSpecComponent
        BGPFlowSpecType.PKT_LEN => pkt_len :FlowSpecComponent
        BGPFlowSpecType.DSCP => dscp :FlowSpecComponent
        BGPFlowSpecType.FRAGMENT => fragment :FlowSpecComponent
        BGPFlowSpecType.LABEL => label :FlowSpecComponent
        BGPFlowSpecType.ETHERNET_TYPE => ethernet_type :FlowSpecComponent
        BGPFlowSpecType.LLC_DSAP => llc_dsap :FlowSpecComponent
        BGPFlowSpecType.LLC_SSAP => llc_ssap :FlowSpecComponent
        BGPFlowSpecType.LLC_CONTROL => llc_control :FlowSpecComponent
        BGPFlowSpecType.SNAP => snap :FlowSpecComponent
        BGPFlowSpecType.VID => vid :FlowSpecComponent
        BGPFlowSpecType.COS => cos :FlowSpecComponent
        BGPFlowSpecType.INNER_VID => inner_vid :FlowSpecComponent
        BGPFlowSpecType.INNER_COS => inner_cos :FlowSpecComponent
        .. => data :[..]u8

state RouteFamily:
    afi :AFI
    safi :SAFI

route_family :RouteFamily

format FlowSpecNLRI:
    length :FlowSpecNLRILength
    components :[..]FlowSpecComponent(input = input.subrange(length.length))
