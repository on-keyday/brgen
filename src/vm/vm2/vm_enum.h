// Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
namespace brgen::vm2 {
    enum class Op2 {
        NOP = 0,
        FUNC_ENTRY = 1,
        TRSF = 2,
        LOAD_MEMORY = 3,
        STORE_MEMORY = 4,
        LOAD_IMMEDIATE = 5,
        ADD = 6,
        SUB = 7,
        MUL = 8,
        DIV = 9,
        MOD = 10,
        AND = 11,
        OR = 12,
        XOR = 13,
        NOT = 14,
        SHL = 15,
        SHR = 16,
        EQ = 17,
        NE = 18,
        LT = 19,
        LE = 20,
        INC = 21,
        DEC = 22,
        NEG = 23,
        JMP = 24,
        JMPIF = 25,
        CALL = 26,
        RET = 27,
        SYSCALL_IMMEDIATE = 28,
        PUSH = 29,
        POP = 30,
        PUSH_IMMEDIATE = 31,
    };
    enum class Register {
        R0 = 0,
        R1 = 1,
        R2 = 2,
        R3 = 3,
        R4 = 4,
        R5 = 5,
        R6 = 6,
        R7 = 7,
        R8 = 8,
        R9 = 9,
        R10 = 10,
        R11 = 11,
        R12 = 12,
        R13 = 13,
        R14 = 14,
        OBJECT_POINTER = 15,
        PC = 16,
        SP = 17,
        BP = 18,
        NUL = 19,
        TRAP = 20,
        TRAP_REASON = 21,
        REGISTER_COUNT = 22,
    };
    enum class TrapNumber {
        NO_TRAP = 0,
        DIVISION_BY_ZERO = 1,
        INVALID_SYSCALL = 2,
        INVALID_MEMORY_ACCESS = 3,
        LARGE_SIZE = 4,
        SYSCALL = 5,
        INVALID_INSTRUCTION = 6,
        INVALID_JUMP = 7,
        STACK_OVERFLOW = 8,
        STACK_UNDERFLOW = 9,
        INVALID_REGISTER_ACCESS = 10,
        OUT_OF_MEMORY = 11,
        END_OF_PROGRAM = 12,
    };
    enum class SyscallNumber {
        READ_IN = 0,
        PEEK_IN = 1,
        WRITE_OUT = 2,
        ALLOCATE = 3,
        BTOI = 4,
        ITOB = 5,
    };
    constexpr auto FUNC_ENTRY_MAGIC = 0xdeadbeefaabbccdd;
    struct MemoryLayout {
        std::uint64_t stack_size = 0;
        std::uint64_t data_size = 0;
        std::uint64_t code_size = 0;
        std::uint64_t entry_point = 0;
        MemoryLayout() {}
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 32;
    };
    inline bool MemoryLayout::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).stack_size), true)) {
            return false;
        }
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).data_size), true)) {
            return false;
        }
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).code_size), true)) {
            return false;
        }
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).entry_point), true)) {
            return false;
        }
        return true;
    }
    inline bool MemoryLayout::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, (*this).stack_size, true)) {
            return false;
        }
        if (!::futils::binary::read_num(r, (*this).data_size, true)) {
            return false;
        }
        if (!::futils::binary::read_num(r, (*this).code_size, true)) {
            return false;
        }
        if (!::futils::binary::read_num(r, (*this).entry_point, true)) {
            return false;
        }
        return true;
    }
    struct Op2Inst {
        Op2 op{};
        struct union_struct_2 {
        };
        struct union_struct_3 {
            std::uint64_t magic = 0;
        };
        struct union_struct_4 {
            Register to{};
        };
        struct union_struct_5 {
            SyscallNumber syscall_number{};
        };
        struct union_struct_6 {
            Register condition{};
            Register to{};
        };
        struct union_struct_7 {
            Register from{};
        };
        struct union_struct_8 {
            std::uint64_t immediate = 0;
        };
        struct union_struct_9 {
            Register from{};
            Register to{};
        };
        struct union_struct_10 {
            Register from{};
            Register to{};
            std::uint64_t size = 0;
        };
        struct union_struct_11 {
            std::uint64_t immediate = 0;
            Register to{};
        };
        struct union_struct_12 {
            Register operand{};
            Register result{};
        };
        struct union_struct_13 {
            Register left{};
            Register right{};
            Register result{};
        };
        std::variant<std::monostate, union_struct_2, union_struct_3, union_struct_4, union_struct_5, union_struct_6, union_struct_7, union_struct_8, union_struct_9, union_struct_10, union_struct_11, union_struct_12, union_struct_13> union_variant_1;
        std::optional<Register> condition() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                if (!std::holds_alternative<union_struct_6>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<5>((*this).union_variant_1).condition;
            }
            return std::nullopt;
        }
        bool condition(const Register& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                if (!std::holds_alternative<union_struct_6>(union_variant_1)) {
                    union_variant_1 = union_struct_6();
                }
                std::get<5>((*this).union_variant_1).condition = v;
                return true;
            }
            return false;
        }
        std::optional<Register> from() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH) == true) {
                if (!std::holds_alternative<union_struct_7>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<6>((*this).union_variant_1).from;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::TRSF) == true) {
                if (!std::holds_alternative<union_struct_9>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<8>((*this).union_variant_1).from;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<9>((*this).union_variant_1).from;
            }
            return std::nullopt;
        }
        bool from(const Register& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH) == true) {
                if (!std::holds_alternative<union_struct_7>(union_variant_1)) {
                    union_variant_1 = union_struct_7();
                }
                std::get<6>((*this).union_variant_1).from = v;
                return true;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::TRSF) == true) {
                if (!std::holds_alternative<union_struct_9>(union_variant_1)) {
                    union_variant_1 = union_struct_9();
                }
                std::get<8>((*this).union_variant_1).from = v;
                return true;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                    union_variant_1 = union_struct_10();
                }
                std::get<9>((*this).union_variant_1).from = v;
                return true;
            }
            return false;
        }
        std::optional<std::uint64_t> immediate() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_8>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<7>((*this).union_variant_1).immediate;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return std::nullopt;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_11>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<10>((*this).union_variant_1).immediate;
            }
            return std::nullopt;
        }
        bool immediate(const std::uint64_t& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_8>(union_variant_1)) {
                    union_variant_1 = union_struct_8();
                }
                std::get<7>((*this).union_variant_1).immediate = v;
                return true;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return false;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return false;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_11>(union_variant_1)) {
                    union_variant_1 = union_struct_11();
                }
                std::get<10>((*this).union_variant_1).immediate = v;
                return true;
            }
            return false;
        }
        std::optional<Register> left() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return std::nullopt;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                return std::nullopt;
            }
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                return std::nullopt;
            }
            return std::get<12>((*this).union_variant_1).left;
        }
        bool left(const Register& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return false;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return false;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return false;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                return false;
            }
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                union_variant_1 = union_struct_13();
            }
            std::get<12>((*this).union_variant_1).left = v;
            return true;
        }
        std::optional<std::uint64_t> magic() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                if (!std::holds_alternative<union_struct_3>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<2>((*this).union_variant_1).magic;
            }
            return std::nullopt;
        }
        bool magic(const std::uint64_t& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                if (!std::holds_alternative<union_struct_3>(union_variant_1)) {
                    union_variant_1 = union_struct_3();
                }
                std::get<2>((*this).union_variant_1).magic = v;
                return true;
            }
            return false;
        }
        std::optional<Register> operand() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return std::nullopt;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                if (!std::holds_alternative<union_struct_12>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<11>((*this).union_variant_1).operand;
            }
            return std::nullopt;
        }
        bool operand(const Register& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return false;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return false;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return false;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                if (!std::holds_alternative<union_struct_12>(union_variant_1)) {
                    union_variant_1 = union_struct_12();
                }
                std::get<11>((*this).union_variant_1).operand = v;
                return true;
            }
            return false;
        }
        std::optional<Register> result() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return std::nullopt;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                if (!std::holds_alternative<union_struct_12>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<11>((*this).union_variant_1).result;
            }
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                return std::nullopt;
            }
            return std::get<12>((*this).union_variant_1).result;
        }
        bool result(const Register& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return false;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return false;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return false;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                if (!std::holds_alternative<union_struct_12>(union_variant_1)) {
                    union_variant_1 = union_struct_12();
                }
                std::get<11>((*this).union_variant_1).result = v;
                return true;
            }
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                union_variant_1 = union_struct_13();
            }
            std::get<12>((*this).union_variant_1).result = v;
            return true;
        }
        std::optional<Register> right() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return std::nullopt;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                return std::nullopt;
            }
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                return std::nullopt;
            }
            return std::get<12>((*this).union_variant_1).right;
        }
        bool right(const Register& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return false;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                return false;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                return false;
            }
            if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG)) == true) {
                return false;
            }
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                union_variant_1 = union_struct_13();
            }
            std::get<12>((*this).union_variant_1).right = v;
            return true;
        }
        std::optional<std::uint64_t> size() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return std::nullopt;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<9>((*this).union_variant_1).size;
            }
            return std::nullopt;
        }
        bool size(const std::uint64_t& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::TRSF) == true) {
                return false;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                    union_variant_1 = union_struct_10();
                }
                std::get<9>((*this).union_variant_1).size = v;
                return true;
            }
            return false;
        }
        std::optional<SyscallNumber> syscall_number() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_5>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<4>((*this).union_variant_1).syscall_number;
            }
            return std::nullopt;
        }
        bool syscall_number(const SyscallNumber& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                return false;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_5>(union_variant_1)) {
                    union_variant_1 = union_struct_5();
                }
                std::get<4>((*this).union_variant_1).syscall_number = v;
                return true;
            }
            return false;
        }
        std::optional<Register> to() const {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return std::nullopt;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                if (!std::holds_alternative<union_struct_4>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<3>((*this).union_variant_1).to;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                if (!std::holds_alternative<union_struct_6>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<5>((*this).union_variant_1).to;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return std::nullopt;
            }
            if (((*this).op == Op2::TRSF) == true) {
                if (!std::holds_alternative<union_struct_9>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<8>((*this).union_variant_1).to;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<9>((*this).union_variant_1).to;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_11>(union_variant_1)) {
                    return std::nullopt;
                }
                return std::get<10>((*this).union_variant_1).to;
            }
            return std::nullopt;
        }
        bool to(const Register& v) {
            if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP)) == true) {
                return false;
            }
            if (((*this).op == Op2::FUNC_ENTRY) == true) {
                return false;
            }
            if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP)) == true) {
                if (!std::holds_alternative<union_struct_4>(union_variant_1)) {
                    union_variant_1 = union_struct_4();
                }
                std::get<3>((*this).union_variant_1).to = v;
                return true;
            }
            if (((*this).op == Op2::SYSCALL_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::JMPIF) == true) {
                if (!std::holds_alternative<union_struct_6>(union_variant_1)) {
                    union_variant_1 = union_struct_6();
                }
                std::get<5>((*this).union_variant_1).to = v;
                return true;
            }
            if (((*this).op == Op2::PUSH) == true) {
                return false;
            }
            if (((*this).op == Op2::PUSH_IMMEDIATE) == true) {
                return false;
            }
            if (((*this).op == Op2::TRSF) == true) {
                if (!std::holds_alternative<union_struct_9>(union_variant_1)) {
                    union_variant_1 = union_struct_9();
                }
                std::get<8>((*this).union_variant_1).to = v;
                return true;
            }
            if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY)) == true) {
                if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                    union_variant_1 = union_struct_10();
                }
                std::get<9>((*this).union_variant_1).to = v;
                return true;
            }
            if (((*this).op == Op2::LOAD_IMMEDIATE) == true) {
                if (!std::holds_alternative<union_struct_11>(union_variant_1)) {
                    union_variant_1 = union_struct_11();
                }
                std::get<10>((*this).union_variant_1).to = v;
                return true;
            }
            return false;
        }
        Op2Inst() {}
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    inline bool Op2Inst::encode(::futils::binary::writer& w) const {
        auto tmp_14_ = static_cast<std::uint8_t>((*this).op);
        if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_14_), true)) {
            return false;
        }
        if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP))) {
            if (!std::holds_alternative<union_struct_2>(union_variant_1)) {
                return false;
            }
        }
        else if (((*this).op == Op2::FUNC_ENTRY)) {
            if (!std::holds_alternative<union_struct_3>(union_variant_1)) {
                return false;
            }
            if (FUNC_ENTRY_MAGIC != std::get<2>((*this).union_variant_1).magic) {
                return false;
            }
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(std::get<2>((*this).union_variant_1).magic), true)) {
                return false;
            }
        }
        else if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP))) {
            if (!std::holds_alternative<union_struct_4>(union_variant_1)) {
                return false;
            }
            auto tmp_15_ = static_cast<std::uint8_t>(std::get<3>((*this).union_variant_1).to);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_15_), true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::SYSCALL_IMMEDIATE)) {
            if (!std::holds_alternative<union_struct_5>(union_variant_1)) {
                return false;
            }
            auto tmp_16_ = static_cast<std::uint64_t>(std::get<4>((*this).union_variant_1).syscall_number);
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(tmp_16_), true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::JMPIF)) {
            if (!std::holds_alternative<union_struct_6>(union_variant_1)) {
                return false;
            }
            auto tmp_17_ = static_cast<std::uint8_t>(std::get<5>((*this).union_variant_1).condition);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_17_), true)) {
                return false;
            }
            auto tmp_18_ = static_cast<std::uint8_t>(std::get<5>((*this).union_variant_1).to);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_18_), true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::PUSH)) {
            if (!std::holds_alternative<union_struct_7>(union_variant_1)) {
                return false;
            }
            auto tmp_19_ = static_cast<std::uint8_t>(std::get<6>((*this).union_variant_1).from);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_19_), true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::PUSH_IMMEDIATE)) {
            if (!std::holds_alternative<union_struct_8>(union_variant_1)) {
                return false;
            }
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(std::get<7>((*this).union_variant_1).immediate), true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::TRSF)) {
            if (!std::holds_alternative<union_struct_9>(union_variant_1)) {
                return false;
            }
            auto tmp_20_ = static_cast<std::uint8_t>(std::get<8>((*this).union_variant_1).from);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_20_), true)) {
                return false;
            }
            auto tmp_21_ = static_cast<std::uint8_t>(std::get<8>((*this).union_variant_1).to);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_21_), true)) {
                return false;
            }
        }
        else if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY))) {
            if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                return false;
            }
            auto tmp_22_ = static_cast<std::uint8_t>(std::get<9>((*this).union_variant_1).from);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_22_), true)) {
                return false;
            }
            auto tmp_23_ = static_cast<std::uint8_t>(std::get<9>((*this).union_variant_1).to);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_23_), true)) {
                return false;
            }
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(std::get<9>((*this).union_variant_1).size), true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::LOAD_IMMEDIATE)) {
            if (!std::holds_alternative<union_struct_11>(union_variant_1)) {
                return false;
            }
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(std::get<10>((*this).union_variant_1).immediate), true)) {
                return false;
            }
            auto tmp_24_ = static_cast<std::uint8_t>(std::get<10>((*this).union_variant_1).to);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_24_), true)) {
                return false;
            }
        }
        else if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG))) {
            if (!std::holds_alternative<union_struct_12>(union_variant_1)) {
                return false;
            }
            auto tmp_25_ = static_cast<std::uint8_t>(std::get<11>((*this).union_variant_1).operand);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_25_), true)) {
                return false;
            }
            auto tmp_26_ = static_cast<std::uint8_t>(std::get<11>((*this).union_variant_1).result);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_26_), true)) {
                return false;
            }
        }
        else {
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                return false;
            }
            auto tmp_27_ = static_cast<std::uint8_t>(std::get<12>((*this).union_variant_1).left);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_27_), true)) {
                return false;
            }
            auto tmp_28_ = static_cast<std::uint8_t>(std::get<12>((*this).union_variant_1).right);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_28_), true)) {
                return false;
            }
            auto tmp_29_ = static_cast<std::uint8_t>(std::get<12>((*this).union_variant_1).result);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_29_), true)) {
                return false;
            }
        }
        return true;
    }
    inline bool Op2Inst::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_30_ = 0;
        if (!::futils::binary::read_num(r, tmp_30_, true)) {
            return false;
        }
        (*this).op = static_cast<Op2>(tmp_30_);
        if ((((*this).op == Op2::RET) || ((*this).op == Op2::NOP))) {
            if (!std::holds_alternative<union_struct_2>(union_variant_1)) {
                union_variant_1 = union_struct_2();
            }
        }
        else if (((*this).op == Op2::FUNC_ENTRY)) {
            if (!std::holds_alternative<union_struct_3>(union_variant_1)) {
                union_variant_1 = union_struct_3();
            }
            if (!::futils::binary::read_num(r, std::get<2>((*this).union_variant_1).magic, true)) {
                return false;
            }
            if (std::get<2>((*this).union_variant_1).magic != FUNC_ENTRY_MAGIC) {
                return false;
            }
        }
        else if (((((*this).op == Op2::JMP) || ((*this).op == Op2::CALL)) || ((*this).op == Op2::POP))) {
            if (!std::holds_alternative<union_struct_4>(union_variant_1)) {
                union_variant_1 = union_struct_4();
            }
            std::uint8_t tmp_31_ = 0;
            if (!::futils::binary::read_num(r, tmp_31_, true)) {
                return false;
            }
            std::get<3>((*this).union_variant_1).to = static_cast<Register>(tmp_31_);
        }
        else if (((*this).op == Op2::SYSCALL_IMMEDIATE)) {
            if (!std::holds_alternative<union_struct_5>(union_variant_1)) {
                union_variant_1 = union_struct_5();
            }
            std::uint64_t tmp_32_ = 0;
            if (!::futils::binary::read_num(r, tmp_32_, true)) {
                return false;
            }
            std::get<4>((*this).union_variant_1).syscall_number = static_cast<SyscallNumber>(tmp_32_);
        }
        else if (((*this).op == Op2::JMPIF)) {
            if (!std::holds_alternative<union_struct_6>(union_variant_1)) {
                union_variant_1 = union_struct_6();
            }
            std::uint8_t tmp_33_ = 0;
            if (!::futils::binary::read_num(r, tmp_33_, true)) {
                return false;
            }
            std::get<5>((*this).union_variant_1).condition = static_cast<Register>(tmp_33_);
            std::uint8_t tmp_34_ = 0;
            if (!::futils::binary::read_num(r, tmp_34_, true)) {
                return false;
            }
            std::get<5>((*this).union_variant_1).to = static_cast<Register>(tmp_34_);
        }
        else if (((*this).op == Op2::PUSH)) {
            if (!std::holds_alternative<union_struct_7>(union_variant_1)) {
                union_variant_1 = union_struct_7();
            }
            std::uint8_t tmp_35_ = 0;
            if (!::futils::binary::read_num(r, tmp_35_, true)) {
                return false;
            }
            std::get<6>((*this).union_variant_1).from = static_cast<Register>(tmp_35_);
        }
        else if (((*this).op == Op2::PUSH_IMMEDIATE)) {
            if (!std::holds_alternative<union_struct_8>(union_variant_1)) {
                union_variant_1 = union_struct_8();
            }
            if (!::futils::binary::read_num(r, std::get<7>((*this).union_variant_1).immediate, true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::TRSF)) {
            if (!std::holds_alternative<union_struct_9>(union_variant_1)) {
                union_variant_1 = union_struct_9();
            }
            std::uint8_t tmp_36_ = 0;
            if (!::futils::binary::read_num(r, tmp_36_, true)) {
                return false;
            }
            std::get<8>((*this).union_variant_1).from = static_cast<Register>(tmp_36_);
            std::uint8_t tmp_37_ = 0;
            if (!::futils::binary::read_num(r, tmp_37_, true)) {
                return false;
            }
            std::get<8>((*this).union_variant_1).to = static_cast<Register>(tmp_37_);
        }
        else if ((((*this).op == Op2::LOAD_MEMORY) || ((*this).op == Op2::STORE_MEMORY))) {
            if (!std::holds_alternative<union_struct_10>(union_variant_1)) {
                union_variant_1 = union_struct_10();
            }
            std::uint8_t tmp_38_ = 0;
            if (!::futils::binary::read_num(r, tmp_38_, true)) {
                return false;
            }
            std::get<9>((*this).union_variant_1).from = static_cast<Register>(tmp_38_);
            std::uint8_t tmp_39_ = 0;
            if (!::futils::binary::read_num(r, tmp_39_, true)) {
                return false;
            }
            std::get<9>((*this).union_variant_1).to = static_cast<Register>(tmp_39_);
            if (!::futils::binary::read_num(r, std::get<9>((*this).union_variant_1).size, true)) {
                return false;
            }
        }
        else if (((*this).op == Op2::LOAD_IMMEDIATE)) {
            if (!std::holds_alternative<union_struct_11>(union_variant_1)) {
                union_variant_1 = union_struct_11();
            }
            if (!::futils::binary::read_num(r, std::get<10>((*this).union_variant_1).immediate, true)) {
                return false;
            }
            std::uint8_t tmp_40_ = 0;
            if (!::futils::binary::read_num(r, tmp_40_, true)) {
                return false;
            }
            std::get<10>((*this).union_variant_1).to = static_cast<Register>(tmp_40_);
        }
        else if ((((((*this).op == Op2::NOT) || ((*this).op == Op2::INC)) || ((*this).op == Op2::DEC)) || ((*this).op == Op2::NEG))) {
            if (!std::holds_alternative<union_struct_12>(union_variant_1)) {
                union_variant_1 = union_struct_12();
            }
            std::uint8_t tmp_41_ = 0;
            if (!::futils::binary::read_num(r, tmp_41_, true)) {
                return false;
            }
            std::get<11>((*this).union_variant_1).operand = static_cast<Register>(tmp_41_);
            std::uint8_t tmp_42_ = 0;
            if (!::futils::binary::read_num(r, tmp_42_, true)) {
                return false;
            }
            std::get<11>((*this).union_variant_1).result = static_cast<Register>(tmp_42_);
        }
        else {
            if (!std::holds_alternative<union_struct_13>(union_variant_1)) {
                union_variant_1 = union_struct_13();
            }
            std::uint8_t tmp_43_ = 0;
            if (!::futils::binary::read_num(r, tmp_43_, true)) {
                return false;
            }
            std::get<12>((*this).union_variant_1).left = static_cast<Register>(tmp_43_);
            std::uint8_t tmp_44_ = 0;
            if (!::futils::binary::read_num(r, tmp_44_, true)) {
                return false;
            }
            std::get<12>((*this).union_variant_1).right = static_cast<Register>(tmp_44_);
            std::uint8_t tmp_45_ = 0;
            if (!::futils::binary::read_num(r, tmp_45_, true)) {
                return false;
            }
            std::get<12>((*this).union_variant_1).result = static_cast<Register>(tmp_45_);
        }
        return true;
    }
}  // namespace brgen::vm2
