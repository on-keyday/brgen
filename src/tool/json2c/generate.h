/*license*/
#pragma once
#include <core/ast/ast.h>
#include <core/ast/tool/sort.h>
#include <writer/writer.h>
#include <core/ast/tool/stringer.h>
#include "../common/line_map.h"

namespace json2c {
    namespace ast = brgen::ast;
    struct Generator {
        brgen::writer::Writer w;
        ast::tool::Stringer str;
        std::vector<std::string> struct_names;
        std::vector<LineMap> line_map;
        void write_program(const std::shared_ptr<ast::Program>& prog) {
            w.writeln("//Code generated by json2c");
            w.writeln("#pragma once");
            w.writeln("#include <stddef.h>");
            w.writeln("#include <stdint.h>");

            for (auto& fmt : prog->elements) {
                if (auto b = ast::as<ast::Binary>(fmt); b && b->op == ast::BinaryOp::const_assign && b->right->constant_level == ast::ConstantLevel::constant) {
                    auto ident = ast::as<ast::Ident>(b->left);
                    assert(ident);
                    w.writeln("#define ", ident->ident, " ", str.to_string(b->right), ";");
                    str.map_ident(ast::cast_to<ast::Ident>(b->left), ident->ident);
                }
                if (auto e = ast::as<ast::Enum>(fmt); e) {
                    // write_enum(ast::cast_to<ast::Enum>(fmt));
                }
            }
            ast::tool::FormatSorter s;
            auto sorted = s.topological_sort(prog);
            for (auto& fmt : sorted) {
            }
        }
    };
}  // namespace json2c
